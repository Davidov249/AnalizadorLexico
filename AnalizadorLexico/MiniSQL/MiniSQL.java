
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package MiniSQL;

import com.company.java_cup.runtime.*;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiniSQL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiniSQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiniSQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiniSQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\007\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\005\003\000\002\005\003" +
    "\000\002\003\004\000\002\006\005\000\002\006\002\000" +
    "\002\007\005\000\002\007\002\000\002\010\004\000\002" +
    "\010\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\004\004\004\001\002\000\004\005\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\006\011\001\002\000\010\007\024\010\ufffe\011" +
    "\ufffe\001\002\000\012\007\ufff9\010\ufff9\011\ufff9\012\013" +
    "\001\002\000\010\007\ufffb\010\ufffb\011\ufffb\001\002\000" +
    "\004\006\014\001\002\000\012\007\ufff7\010\ufff7\011\ufff7" +
    "\012\016\001\002\000\010\007\ufffa\010\ufffa\011\ufffa\001" +
    "\002\000\004\006\017\001\002\000\012\007\ufff5\010\ufff5" +
    "\011\ufff5\012\021\001\002\000\010\007\ufff8\010\ufff8\011" +
    "\ufff8\001\002\000\004\006\022\001\002\000\010\007\ufff6" +
    "\010\ufff6\011\ufff6\001\002\000\006\010\027\011\030\001" +
    "\002\000\004\006\011\001\002\000\006\010\uffff\011\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\026\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\007\001\001" +
    "\000\004\004\022\001\001\000\004\006\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\025\001\001\000\004\003\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiniSQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiniSQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiniSQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }


    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m.append(" " + s.value.toString());
            if (s.left >= 0) {                
                m.append(" in line "+(s.left));
                if (s.right >= 0)
                    m.append(", column "+(s.right));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
             parser asin = new parser(
                    new Lexer( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiniSQL$actions {
  private final MiniSQL parser;

  /** Constructor */
  CUP$MiniSQL$actions(MiniSQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiniSQL$do_action_part00000000(
    int                        CUP$MiniSQL$act_num,
    java_cup.runtime.lr_parser CUP$MiniSQL$parser,
    java.util.Stack            CUP$MiniSQL$stack,
    int                        CUP$MiniSQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiniSQL$result;

      /* select the action based on the action number */
      switch (CUP$MiniSQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // TRUNCATEP ::= TRUNCATE TABLE OBJECT TRUNCATE1 TRUNCATE2 
            {
              Object RESULT =null;

              CUP$MiniSQL$result = parser.getSymbolFactory().newSymbol("TRUNCATEP",0, ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.elementAt(CUP$MiniSQL$top-4)), ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), RESULT);
            }
          return CUP$MiniSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= TRUNCATEP EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.elementAt(CUP$MiniSQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.elementAt(CUP$MiniSQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MiniSQL$stack.elementAt(CUP$MiniSQL$top-1)).value;
		RESULT = start_val;
              CUP$MiniSQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.elementAt(CUP$MiniSQL$top-1)), ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiniSQL$parser.done_parsing();
          return CUP$MiniSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TRUNCATE1 ::= Coma OBJECT 
            {
              Object RESULT =null;

              CUP$MiniSQL$result = parser.getSymbolFactory().newSymbol("TRUNCATE1",2, ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.elementAt(CUP$MiniSQL$top-1)), ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), RESULT);
            }
          return CUP$MiniSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TRUNCATE1 ::= 
            {
              Object RESULT =null;

              CUP$MiniSQL$result = parser.getSymbolFactory().newSymbol("TRUNCATE1",2, ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), RESULT);
            }
          return CUP$MiniSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TRUNCATE2 ::= Puntoycoma 
            {
              Object RESULT =null;

              CUP$MiniSQL$result = parser.getSymbolFactory().newSymbol("TRUNCATE2",3, ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), RESULT);
            }
          return CUP$MiniSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TRUNCATE2 ::= GO 
            {
              Object RESULT =null;

              CUP$MiniSQL$result = parser.getSymbolFactory().newSymbol("TRUNCATE2",3, ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), RESULT);
            }
          return CUP$MiniSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OBJECT ::= Identificador OBJECT1 
            {
              Object RESULT =null;

              CUP$MiniSQL$result = parser.getSymbolFactory().newSymbol("OBJECT",1, ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.elementAt(CUP$MiniSQL$top-1)), ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), RESULT);
            }
          return CUP$MiniSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OBJECT1 ::= Punto Identificador OBJECT2 
            {
              Object RESULT =null;

              CUP$MiniSQL$result = parser.getSymbolFactory().newSymbol("OBJECT1",4, ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.elementAt(CUP$MiniSQL$top-2)), ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), RESULT);
            }
          return CUP$MiniSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OBJECT1 ::= 
            {
              Object RESULT =null;

              CUP$MiniSQL$result = parser.getSymbolFactory().newSymbol("OBJECT1",4, ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), RESULT);
            }
          return CUP$MiniSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OBJECT2 ::= Punto Identificador OBJECT3 
            {
              Object RESULT =null;

              CUP$MiniSQL$result = parser.getSymbolFactory().newSymbol("OBJECT2",5, ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.elementAt(CUP$MiniSQL$top-2)), ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), RESULT);
            }
          return CUP$MiniSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OBJECT2 ::= 
            {
              Object RESULT =null;

              CUP$MiniSQL$result = parser.getSymbolFactory().newSymbol("OBJECT2",5, ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), RESULT);
            }
          return CUP$MiniSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OBJECT3 ::= Punto Identificador 
            {
              Object RESULT =null;

              CUP$MiniSQL$result = parser.getSymbolFactory().newSymbol("OBJECT3",6, ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.elementAt(CUP$MiniSQL$top-1)), ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), RESULT);
            }
          return CUP$MiniSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OBJECT3 ::= 
            {
              Object RESULT =null;

              CUP$MiniSQL$result = parser.getSymbolFactory().newSymbol("OBJECT3",6, ((java_cup.runtime.Symbol)CUP$MiniSQL$stack.peek()), RESULT);
            }
          return CUP$MiniSQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiniSQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiniSQL$do_action(
    int                        CUP$MiniSQL$act_num,
    java_cup.runtime.lr_parser CUP$MiniSQL$parser,
    java.util.Stack            CUP$MiniSQL$stack,
    int                        CUP$MiniSQL$top)
    throws java.lang.Exception
    {
              return CUP$MiniSQL$do_action_part00000000(
                               CUP$MiniSQL$act_num,
                               CUP$MiniSQL$parser,
                               CUP$MiniSQL$stack,
                               CUP$MiniSQL$top);
    }
}

}
