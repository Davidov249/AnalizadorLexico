/* The following code was generated by JFlex 1.7.0 */

package MiniSQL;

import java.lang.Object;
import java.lang.String;
import java.io.PrintWriter;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.lang.System;
import java.io.Console;
import java.io.InputStream;
import java.util.Scanner;
import AnalizadorSintactico.AnalizadorSintactico;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer.jflex</tt>
 */
public class MiniSQL {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\63\1\43\3\63\22\0\1\63\1\50\1\0\1\61\1\0"+
    "\1\47\1\52\1\42\1\56\1\46\1\45\1\41\1\53\1\31\1\37"+
    "\1\44\2\35\10\35\1\0\1\53\1\50\1\51\1\50\1\0\1\53"+
    "\1\1\1\2\1\11\1\14\1\10\1\30\1\22\1\17\1\12\1\33"+
    "\1\23\1\5\1\27\1\13\1\4\1\24\1\34\1\15\1\3\1\7"+
    "\1\6\1\21\1\25\1\32\1\16\1\20\1\54\1\0\1\55\1\0"+
    "\1\26\1\0\4\62\1\40\25\62\1\57\1\36\1\60\7\0\1\63"+
    "\32\0\1\63\u15df\0\1\63\u097f\0\13\63\35\0\2\63\5\0\1\63"+
    "\57\0\1\63\u0fa0\0\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\4\2\2\3\4\2\1\3\14\2\1\4"+
    "\2\2\1\5\1\3\1\6\1\4\1\7\1\10\2\4"+
    "\1\1\4\6\1\2\1\11\2\2\1\11\31\2\2\11"+
    "\2\2\1\11\11\2\1\11\17\2\2\11\3\2\1\11"+
    "\25\2\1\11\34\2\1\12\1\2\1\13\1\14\1\7"+
    "\1\0\2\2\1\11\7\2\1\11\6\2\1\11\10\2"+
    "\1\11\4\2\1\11\7\2\1\11\20\2\1\11\25\2"+
    "\1\11\24\2\1\11\50\2\1\11\1\2\1\11\6\2"+
    "\1\13\1\0\27\2\2\11\10\2\1\11\1\2\1\11"+
    "\3\2\1\0\25\2\1\11\16\2\1\11\3\2\1\11"+
    "\13\2\1\11\15\2\1\11\5\2\1\11\1\2\1\11"+
    "\4\2\1\13\1\15\25\2\1\11\6\2\1\0\15\2"+
    "\1\11\35\2\1\11\33\2\1\0\1\11\33\2\1\11"+
    "\11\2\1\0\1\11\4\2\1\11\21\2\1\11\1\2"+
    "\1\11\3\2\1\11\55\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[650];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\64\0\64"+
    "\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u0548\0\u08bc\0\u08f0"+
    "\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90"+
    "\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30"+
    "\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0"+
    "\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70"+
    "\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110"+
    "\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0"+
    "\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450"+
    "\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930"+
    "\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0"+
    "\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10"+
    "\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0"+
    "\0\64\0\64\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8"+
    "\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288"+
    "\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428"+
    "\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8"+
    "\0\u25fc\0\u2630\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768"+
    "\0\u279c\0\u27d0\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908"+
    "\0\u293c\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8"+
    "\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48"+
    "\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8"+
    "\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\u2f54\0\u2f88"+
    "\0\u2fbc\0\u2ff0\0\u3024\0\u3058\0\u308c\0\u30c0\0\u30f4\0\u3128"+
    "\0\u315c\0\u3190\0\u31c4\0\u31f8\0\u322c\0\u3260\0\u3294\0\u32c8"+
    "\0\u32fc\0\u3330\0\u10a8\0\u3364\0\u3398\0\u33cc\0\u3400\0\u3434"+
    "\0\u3468\0\u349c\0\u34d0\0\u3504\0\u3538\0\u356c\0\u35a0\0\u35d4"+
    "\0\u3608\0\u363c\0\u3670\0\u36a4\0\u36d8\0\u370c\0\u2804\0\u3740"+
    "\0\u3774\0\u37a8\0\u37dc\0\u3810\0\u3844\0\u3878\0\u38ac\0\u38e0"+
    "\0\u3914\0\u3948\0\u397c\0\u39b0\0\u39e4\0\u3a18\0\u3a4c\0\u3a80"+
    "\0\u3ab4\0\u3ae8\0\u3b1c\0\u3b50\0\u3b84\0\u3bb8\0\u3bec\0\u3c20"+
    "\0\u3c54\0\u3c88\0\u3cbc\0\u3cf0\0\u3d24\0\u3d58\0\u3d8c\0\u3dc0"+
    "\0\u3df4\0\u3e28\0\u3e5c\0\u3e90\0\u3ec4\0\u3ef8\0\u3f2c\0\u3f60"+
    "\0\u3f94\0\u3fc8\0\u3ffc\0\u4030\0\u4064\0\u4098\0\u40cc\0\u4100"+
    "\0\u4134\0\u4168\0\u419c\0\u41d0\0\u4204\0\u4238\0\u426c\0\u42a0"+
    "\0\u42d4\0\u4308\0\u433c\0\u4370\0\u43a4\0\u43d8\0\u440c\0\u4440"+
    "\0\u4474\0\u44a8\0\u44dc\0\u4510\0\u4544\0\u4578\0\u45ac\0\u45e0"+
    "\0\u4614\0\u4648\0\u467c\0\u46b0\0\u46e4\0\u4718\0\u474c\0\u4780"+
    "\0\u47b4\0\u47e8\0\u481c\0\u4850\0\u4884\0\u48b8\0\u48ec\0\u4920"+
    "\0\u3c20\0\u4954\0\u4988\0\u49bc\0\u49f0\0\u4a24\0\u4a58\0\u4a8c"+
    "\0\u4ac0\0\u4af4\0\u4b28\0\u4b5c\0\u4b90\0\u4bc4\0\u4bf8\0\u4c2c"+
    "\0\u4c60\0\u4c94\0\u4cc8\0\u4cfc\0\u4d30\0\u4d64\0\u4d98\0\u4dcc"+
    "\0\u4e00\0\u4e34\0\u4e68\0\u4e9c\0\u4ed0\0\u4f04\0\u4f38\0\u4f6c"+
    "\0\u4fa0\0\u4fd4\0\u5008\0\u503c\0\u5070\0\u50a4\0\u50d8\0\u510c"+
    "\0\u5140\0\u5174\0\u51a8\0\u51dc\0\u5210\0\u5244\0\u5278\0\u52ac"+
    "\0\u52e0\0\u5314\0\u5348\0\u537c\0\u53b0\0\u53e4\0\u5418\0\u544c"+
    "\0\u5480\0\u54b4\0\u54e8\0\u551c\0\u5550\0\u5584\0\u55b8\0\u55ec"+
    "\0\u5620\0\u5654\0\64\0\u5688\0\u56bc\0\u56f0\0\u5724\0\u5758"+
    "\0\u578c\0\u57c0\0\u57f4\0\u5828\0\u585c\0\u5890\0\u58c4\0\u58f8"+
    "\0\u2220\0\u592c\0\u5960\0\u5994\0\u59c8\0\u59fc\0\u5a30\0\u5a64"+
    "\0\u5a98\0\u5acc\0\u5b00\0\u5b34\0\u5b68\0\u5b9c\0\u5bd0\0\u5c04"+
    "\0\u5c38\0\u5c6c\0\u5ca0\0\u5cd4\0\u5d08\0\u5d3c\0\u5d70\0\u5da4"+
    "\0\u5dd8\0\u5e0c\0\u5e40\0\u5e74\0\u5ea8\0\u5edc\0\u5f10\0\u5f44"+
    "\0\u5f78\0\u5fac\0\u5fe0\0\u6014\0\u6048\0\u607c\0\u60b0\0\u60e4"+
    "\0\u2080\0\u6118\0\u614c\0\u6180\0\u61b4\0\u61e8\0\u621c\0\u6250"+
    "\0\u6284\0\u62b8\0\u62ec\0\u6320\0\u6354\0\u6388\0\u63bc\0\u63f0"+
    "\0\u6424\0\u6458\0\u648c\0\u4a24\0\u64c0\0\u64f4\0\u6528\0\u655c"+
    "\0\u6590\0\u65c4\0\u65f8\0\u662c\0\u6660\0\u6694\0\u66c8\0\u66fc"+
    "\0\u6730\0\u6764\0\u6798\0\u67cc\0\u6800\0\u6834\0\u6868\0\u689c"+
    "\0\u68d0\0\u6904\0\u6938\0\u696c\0\u69a0\0\u69d4\0\u6a08\0\u6a3c"+
    "\0\u211c\0\u6a70\0\u6aa4\0\u6ad8\0\u6b0c\0\u6b40\0\u6b74\0\u6ba8"+
    "\0\u6bdc\0\u6c10\0\u6c44\0\u6c78\0\u6cac\0\u6ce0\0\u6d14\0\u6d48"+
    "\0\u6d7c\0\u6db0\0\u6de4\0\u6e18\0\u6e4c\0\u6e80\0\u6eb4\0\u6ee8"+
    "\0\u6f1c\0\u6f50\0\u6f84\0\u6fb8\0\u6800\0\u6fec\0\u7020\0\u238c"+
    "\0\u7054\0\u7088\0\u70bc\0\u70f0\0\u7124\0\u7158\0\u718c\0\u26cc"+
    "\0\u71c0\0\u71f4\0\u7228\0\u725c\0\u7290\0\u72c4\0\u0dd0\0\u72f8"+
    "\0\u732c\0\u7360\0\u7394\0\u73c8\0\u73fc\0\u7430\0\u7464\0\u7498"+
    "\0\u74cc\0\u7500\0\u7534\0\u7568\0\u759c\0\u75d0\0\64\0\u7604"+
    "\0\u7638\0\u766c\0\u76a0\0\u76d4\0\u7708\0\u773c\0\u7770\0\u77a4"+
    "\0\u77d8\0\u780c\0\u7840\0\u7874\0\u78a8\0\u78dc\0\u7910\0\u7944"+
    "\0\u7978\0\u79ac\0\u79e0\0\u7a14\0\u7a48\0\u7a7c\0\u7ab0\0\u7ae4"+
    "\0\u7b18\0\u7b4c\0\u7b80\0\u7bb4\0\u7be8\0\u7c1c\0\u7c50\0\u7c84"+
    "\0\u7cb8\0\u7cec\0\u7d20\0\u7d54\0\u7d88\0\u7dbc\0\u7df0\0\u7e24"+
    "\0\u7e58\0\u7e8c\0\u7638\0\u7ec0\0\u7ef4\0\u7f28\0\u7f5c\0\u7f90"+
    "\0\u7fc4\0\u7ff8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[650];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\2\1\30"+
    "\1\31\1\32\1\33\1\34\1\33\1\35\1\36\1\37"+
    "\1\33\1\40\1\41\1\42\1\43\1\40\1\37\1\40"+
    "\2\44\1\45\1\37\1\46\1\37\1\47\1\50\1\37"+
    "\1\51\1\33\1\42\65\0\1\33\1\52\1\53\1\33"+
    "\1\54\1\55\1\56\1\33\1\57\1\33\1\60\1\61"+
    "\1\62\3\33\1\63\7\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\1\64\2\33\1\65\1\33\1\66"+
    "\1\33\1\67\1\33\1\70\2\33\1\71\1\56\12\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\1\72"+
    "\2\33\1\73\1\33\1\74\1\75\1\76\1\77\1\100"+
    "\3\33\1\101\1\102\4\33\1\103\2\33\1\104\1\33"+
    "\1\0\2\33\1\105\3\0\1\33\21\0\1\33\2\0"+
    "\5\33\1\106\2\33\1\107\1\33\1\110\1\33\1\111"+
    "\3\33\1\112\2\33\1\113\3\33\1\114\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\1\115\2\33\1\116"+
    "\3\33\1\117\1\33\1\120\16\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\2\33\1\121\7\33\1\122"+
    "\10\33\1\123\4\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\1\124\1\33\1\125\1\126\3\33\1\127"+
    "\1\33\1\130\2\33\1\131\1\33\1\132\11\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\2\33\1\133"+
    "\1\33\1\134\5\33\1\135\1\33\1\136\13\33\1\0"+
    "\1\137\2\33\3\0\1\33\21\0\1\33\2\0\1\140"+
    "\2\33\1\141\1\142\1\143\6\33\1\144\1\33\1\145"+
    "\11\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\2\33\1\146\7\33\1\147\1\150\12\33\1\151\1\56"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\1\152"+
    "\2\33\1\153\1\33\1\154\1\33\1\155\1\156\17\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\1\157"+
    "\1\160\1\33\1\161\1\33\1\162\1\33\1\163\1\33"+
    "\1\164\2\33\1\165\13\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\1\166\2\33\1\167\1\33\1\170"+
    "\1\33\1\171\1\33\1\172\16\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\7\33\1\173\20\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\1\174\2\33"+
    "\1\175\24\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\3\33\1\176\24\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\1\177\10\33\1\200\16\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\3\33\1\201"+
    "\1\202\2\33\1\203\4\33\1\204\13\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\7\33\1\205\1\33"+
    "\1\206\16\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\1\207\2\33\1\210\1\211\1\212\1\33\1\213"+
    "\1\33\1\214\2\33\1\215\13\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\1\216\2\33\1\217\5\33"+
    "\1\220\2\33\1\221\1\33\1\222\11\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\1\223\2\33\1\224"+
    "\3\33\1\225\1\33\1\226\16\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\1\227\2\33\1\230\1\231"+
    "\1\232\1\33\1\233\1\33\1\234\2\33\1\235\13\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\32\0\1\236"+
    "\33\0\30\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\3\33\1\237\24\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\36\0\1\35\1\0\1\240\62\0\1\40"+
    "\25\0\42\41\1\241\1\242\20\41\43\0\1\42\17\0"+
    "\1\42\45\0\1\243\67\0\1\40\64\0\1\40\66\0"+
    "\1\37\54\0\1\37\75\0\1\37\64\0\1\37\3\0"+
    "\2\33\1\244\25\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\2\33\1\245\5\33\1\56\17\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\4\33\1\246"+
    "\1\33\1\247\21\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\6\33\1\250\21\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\6\33\1\251\21\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\13\33\1\56"+
    "\1\33\1\56\12\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\1\56\12\33\1\56\14\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\7\33\1\56\20\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\21\33"+
    "\1\56\6\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\10\33\1\252\17\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\6\33\1\253\21\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\4\33\1\254\23\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\6\33"+
    "\1\255\12\33\1\237\6\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\6\33\1\256\21\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\3\33\1\257\3\33"+
    "\1\260\20\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\20\33\1\62\7\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\26\33\1\62\1\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\1\33\1\261\24\33"+
    "\1\56\1\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\1\262\27\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\2\33\1\263\1\33\1\264\1\33\1\265"+
    "\1\33\1\266\15\33\1\267\1\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\14\33\1\270\1\33\1\271"+
    "\11\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\17\33\1\62\10\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\2\33\1\272\25\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\5\33\1\273\22\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\1\274\27\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\1\275"+
    "\27\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\4\33\1\276\23\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\6\33\1\277\21\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\6\33\1\300\21\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\4\33\1\205"+
    "\23\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\13\33\1\247\14\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\7\33\1\301\20\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\6\33\1\251\1\302\20\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\27\33"+
    "\1\303\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\2\33\1\203\7\33\1\304\15\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\1\305\7\33\1\306\13\33"+
    "\1\247\3\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\1\307\17\33\1\310\6\33\1\203\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\12\33\1\311\7\33"+
    "\1\62\5\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\1\312\6\33\1\313\1\33\1\314\16\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\11\33\1\315"+
    "\10\33\1\316\1\317\4\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\13\33\1\320\7\33\1\247\4\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\1\33"+
    "\1\321\26\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\7\33\1\322\20\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\23\33\1\56\4\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\26\33\1\323\1\33"+
    "\1\0\1\324\2\33\3\0\1\33\21\0\1\33\2\0"+
    "\26\33\1\325\1\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\1\326\4\33\1\327\3\33\1\330\3\33"+
    "\1\331\12\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\7\33\1\332\20\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\10\33\1\333\17\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\2\33\1\62\25\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\13\33"+
    "\1\334\14\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\14\33\1\335\13\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\6\33\1\336\1\337\1\340\1\341"+
    "\16\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\2\33\1\342\3\33\1\343\21\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\1\344\3\33\1\345\1\346"+
    "\4\33\1\347\1\33\1\350\11\33\1\351\1\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\3\33\1\134"+
    "\1\33\1\352\22\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\14\33\1\353\13\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\3\33\1\354\3\33\1\355"+
    "\20\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\1\356\6\33\1\357\20\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\3\33\1\360\24\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\2\33\1\361\3\33"+
    "\1\362\1\33\1\363\1\364\1\247\1\365\7\33\1\366"+
    "\4\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\7\33\1\367\20\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\26\33\1\370\1\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\6\33\1\371\17\33\1\372"+
    "\1\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\6\33\1\56\1\33\1\373\1\33\1\374\15\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\4\33\1\375"+
    "\21\33\1\376\1\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\30\33\1\0\1\203\2\33\3\0\1\33"+
    "\21\0\1\33\2\0\16\33\1\173\11\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\6\33\1\377\6\33"+
    "\1\56\12\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\10\33\1\u0100\17\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\5\33\1\u0101\20\33\1\u0102\1\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\26\33"+
    "\1\u0103\1\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\1\u0104\1\33\1\u0105\1\33\1\u0106\3\33\1\u0107"+
    "\1\33\1\205\14\33\1\u0108\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\1\u0109\1\33\1\u010a\25\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\3\33\1\u0103"+
    "\24\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\11\33\1\u010b\16\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\4\33\1\u010c\17\33\1\u010d\3\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\4\33\1\62"+
    "\23\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\1\u010e\1\33\1\u010f\1\33\1\u0110\1\33\1\u0111\1\33"+
    "\1\u0112\7\33\1\u0113\2\33\1\u0114\3\33\1\u0115\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\21\33\1\u0116"+
    "\6\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\1\u0117\27\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\20\33\1\u0118\7\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\4\33\1\u0119\1\u0117\22\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\12\33\1\62"+
    "\15\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\4\33\1\u011a\7\33\1\u011b\13\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\7\33\1\u011c\20\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\6\33\1\u011d"+
    "\21\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\3\33\1\u011e\24\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\6\33\1\56\21\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\1\346\2\33\1\u011f\24\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\15\33"+
    "\1\56\12\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\4\33\1\u0120\23\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\2\33\1\u0121\10\33\1\56\1\u0122"+
    "\13\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\2\33\1\u0123\25\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\1\332\27\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\1\33\1\u0124\26\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\14\33\1\u0125\13\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\20\33"+
    "\1\u0126\7\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\3\33\1\u0127\3\33\1\u0128\1\33\1\u0129\16\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\11\33"+
    "\1\u012a\16\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\14\33\1\254\13\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\6\33\1\u012b\21\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\11\33\1\u012c\16\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\7\33"+
    "\1\u012d\1\33\1\170\16\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\6\33\1\u012e\21\33\1\0\1\56"+
    "\2\33\3\0\1\33\21\0\1\33\2\0\12\33\1\65"+
    "\1\u012f\14\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\14\33\1\312\13\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\12\33\1\u0130\15\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\4\33\1\134\23\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\5\33"+
    "\1\u0131\6\33\1\u0132\13\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\3\33\1\u0133\24\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\4\33\1\u0120\5\33"+
    "\1\u0134\15\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\6\33\1\u012e\21\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\4\33\1\u0135\7\33\1\u0136\13\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\3\33"+
    "\1\u0137\3\33\1\u0138\20\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\1\0\43\236\1\0\20\236\1\0\11\33"+
    "\1\332\16\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\11\0\1\u0139\24\0\1\240\2\0\1\u0139\23\0\44\243"+
    "\1\0\1\u013a\1\0\7\243\1\0\5\243\1\0\3\33"+
    "\1\u013b\24\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\7\33\1\u013c\20\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\3\33\1\u013d\24\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\7\33\1\u0117\20\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\16\33"+
    "\1\u013e\11\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\11\33\1\u013f\16\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\22\33\1\u011f\5\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\16\33\1\56\11\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\22\33"+
    "\1\56\5\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\24\33\1\u0140\3\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\25\33\1\u0141\2\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\24\33\1\134\3\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\1\254"+
    "\27\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\2\33\1\u0142\25\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\6\33\1\u0143\21\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\2\33\1\u0144\25\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\7\33\1\u0145"+
    "\20\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\5\33\1\u0146\22\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\3\33\1\u0131\1\33\1\u0147\1\251\21\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\1\u0148"+
    "\27\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\3\33\1\206\24\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\7\33\1\u0149\20\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\6\33\1\u014a\21\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\6\33\1\u014b"+
    "\21\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\10\33\1\62\17\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\4\33\1\u014c\23\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\2\33\1\u014d\4\33\1\u014e"+
    "\1\u014f\13\33\1\u0150\3\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\7\33\1\u0117\13\33\1\366\4\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\7\33"+
    "\1\u0151\20\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\14\33\1\u0152\13\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\12\33\1\u0153\15\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\2\33\1\372\25\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\21\33"+
    "\1\u0154\6\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\13\33\1\56\14\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\1\u0120\27\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\13\33\1\u0118\14\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\7\33\1\u0120"+
    "\20\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\7\33\1\u0155\20\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\21\33\1\62\6\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\14\33\1\56\13\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\12\33\1\63"+
    "\15\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\3\33\1\332\24\33\1\0\2\33\1\u0156\3\0\1\33"+
    "\21\0\1\33\2\0\12\33\1\u0157\15\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\11\33\1\214\16\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\1\u012c"+
    "\27\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\4\33\1\u0158\23\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\30\33\1\0\2\33\1\u0159\3\0\1\33"+
    "\21\0\1\33\2\0\23\33\1\u015a\4\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\6\33\1\u015b\21\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\7\33"+
    "\1\u015c\20\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\11\33\1\u015d\1\u015e\15\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\7\33\1\56\2\33\1\u013d"+
    "\15\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\21\33\1\u015f\4\33\1\56\1\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\25\33\1\u0160\2\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\12\33\1\56"+
    "\15\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\1\u0161\27\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\30\33\1\u0162\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\4\33\1\u0163\23\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\7\33\1\u0164\4\33\1\u0165\13\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\10\33"+
    "\1\u0130\17\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\7\33\1\u0166\20\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\2\33\1\u0167\3\33\1\56\21\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\6\33"+
    "\2\56\1\u0168\17\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\1\u0169\27\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\4\33\1\u016a\23\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\4\33\1\355\1\u016b"+
    "\22\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\12\33\1\203\15\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\2\33\1\u016c\3\33\1\u016d\3\33\1\u016e"+
    "\5\33\1\u016f\7\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\14\33\1\u0170\13\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\23\33\1\u0171\2\33\1\u0172"+
    "\1\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\2\33\1\u0173\25\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\2\33\1\u0174\11\33\1\u0175\13\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\2\33\1\u0176"+
    "\25\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\1\u0177\27\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\14\33\1\u0178\13\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\10\33\1\u0179\17\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\4\33\1\u017a\23\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\7\33"+
    "\1\u017b\20\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\3\33\1\56\3\33\1\u017c\20\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\4\33\1\u017d\23\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\6\33"+
    "\1\u017e\21\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\7\33\1\u017f\1\33\1\u0180\16\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\5\33\1\203\22\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\12\33"+
    "\1\u0181\15\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\7\33\1\u0182\20\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\5\33\1\u0183\3\33\1\u0184\16\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\7\33"+
    "\1\u0176\20\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\16\33\1\u0185\11\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\7\33\1\56\1\u0186\17\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\4\33\1\u0187"+
    "\23\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\7\33\1\u0188\20\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\1\u0189\6\33\1\56\20\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\10\33\1\56\17\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\1\33"+
    "\1\170\26\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\1\237\27\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\4\33\1\u018a\23\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\10\33\1\u018b\17\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\7\33\1\u0177"+
    "\20\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\4\33\1\u018c\4\33\1\u018d\16\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\1\u018e\6\33\1\u018f\20\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\21\33"+
    "\1\u0190\6\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\6\33\1\u0191\1\33\1\u0192\11\33\1\56\5\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\2\33"+
    "\1\u0193\25\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\4\33\1\u0194\23\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\2\33\1\56\5\33\1\u0195\10\33"+
    "\1\u0196\6\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\4\33\1\56\6\33\1\u0197\14\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\6\33\1\u0198\21\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\1\u0199"+
    "\27\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\5\33\1\u019a\22\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\3\33\1\u019b\24\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\3\33\1\u019c\3\33\1\u019d"+
    "\20\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\4\33\1\u019e\23\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\7\33\1\u019f\20\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\16\33\1\203\11\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\11\33\1\314"+
    "\16\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\13\33\1\u01a0\14\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\5\33\1\u01a1\22\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\10\33\1\156\4\33\1\u0118"+
    "\12\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\24\33\1\56\3\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\3\33\1\56\24\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\1\33\1\306\26\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\5\33\1\u0103"+
    "\22\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\4\33\1\56\23\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\10\33\1\306\17\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\6\33\1\u01a2\21\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\11\33\1\57"+
    "\16\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\4\33\1\u01a3\23\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\10\33\1\u01a4\17\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\3\33\1\203\24\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\10\33\1\u01a5"+
    "\17\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\2\33\1\u01a6\5\33\1\u01a7\12\33\1\u018c\4\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\3\33\1\u0117"+
    "\6\33\1\203\5\33\1\u01a8\5\33\1\u01a9\1\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\6\33\1\u01aa"+
    "\21\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\16\33\1\u01ab\11\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\6\33\1\u01ac\21\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\12\33\1\u01ad\1\33\1\62"+
    "\13\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\10\33\1\253\17\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\5\33\1\170\22\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\5\33\1\u0177\22\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\12\33\1\305"+
    "\15\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\6\33\1\u01ae\1\u01af\20\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\1\203\27\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\10\33\1\57\17\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\4\33\1\u01b0"+
    "\2\33\1\56\20\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\2\33\1\203\25\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\26\33\1\56\1\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\7\33\1\u01b1"+
    "\20\33\1\0\3\33\3\0\1\33\21\0\1\33\32\0"+
    "\1\u01b2\3\0\1\u01b2\3\0\1\u01b2\66\0\1\u01b3\20\0"+
    "\4\33\1\u0171\23\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\14\33\1\57\13\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\10\33\1\355\17\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\3\33\1\u01b4"+
    "\24\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\3\33\1\332\24\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\7\33\1\132\20\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\4\33\1\u01b5\23\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\6\33\1\u01b6"+
    "\21\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\11\33\1\u01b7\16\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\11\33\1\u01b8\16\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\10\33\1\203\17\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\2\33\1\247"+
    "\25\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\14\33\1\u01b9\13\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\12\33\1\u01ba\15\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\26\33\1\u01bb\1\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\7\33\1\u01bc"+
    "\20\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\13\33\1\u0157\14\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\4\33\1\u01bd\23\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\6\33\1\355\21\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\14\33\1\u01be"+
    "\13\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\1\56\2\33\1\u01bf\24\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\1\u01c0\27\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\6\33\1\u01c1\21\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\4\33\1\u01c2"+
    "\23\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\13\33\1\u01c3\1\u01c4\13\33\1\0\1\u01c5\1\33\1\u01c6"+
    "\3\0\1\33\21\0\1\33\2\0\5\33\1\u01c7\22\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\12\33"+
    "\1\u011d\15\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\5\33\1\62\22\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\3\33\1\u01c8\24\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\7\33\1\u01c9\20\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\5\33"+
    "\1\306\22\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\3\33\1\u01ca\24\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\2\33\1\u01cb\25\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\2\33\1\u01cc\14\33"+
    "\1\u01cd\10\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\4\33\1\u0118\23\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\2\33\1\u01ce\25\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\21\33\1\247\6\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\10\33"+
    "\1\u01cf\17\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\23\33\1\62\4\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\11\0\1\u01d0\54\0\20\33\1\u0120\7\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\14\33"+
    "\1\u01d1\13\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\1\u0145\27\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\23\33\1\u01d2\4\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\6\33\1\u0176\21\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\1\u01d3\27\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\4\33"+
    "\1\u01d4\23\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\4\33\1\u0123\2\33\1\u01d5\20\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\26\33\1\332\1\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\6\33"+
    "\1\u01d6\21\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\1\u01d7\10\33\1\u01d8\16\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\7\33\1\u01d9\20\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\7\33\1\u019d"+
    "\20\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\7\33\1\u01da\20\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\11\33\1\203\16\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\6\33\1\u01db\21\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\3\33\1\u0117"+
    "\24\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\7\33\1\u01dc\20\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\2\33\1\56\25\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\6\33\1\62\21\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\1\u01dd\24\33"+
    "\1\u0141\2\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\22\33\1\u01de\5\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\1\57\27\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\12\33\1\u01df\1\33\1\203"+
    "\13\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\14\33\1\u01e0\4\33\1\247\6\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\5\33\1\u01bf\22\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\11\33\1\u01e1"+
    "\16\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\30\33\1\0\1\56\2\33\3\0\1\33\21\0\1\33"+
    "\2\0\10\33\1\u01e2\17\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\6\33\1\u01e3\21\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\13\33\1\u01e4\14\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\14\33"+
    "\1\306\13\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\3\33\1\u01d1\24\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\7\33\1\u01e5\20\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\4\33\1\u01e6\23\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\11\33"+
    "\1\u01e7\16\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\14\33\1\u01a3\13\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\1\33\1\u01e8\26\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\4\33\1\u01e9\23\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\14\33"+
    "\1\u01ea\13\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\1\u01eb\27\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\26\33\1\306\1\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\5\33\1\u01ec\22\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\14\33\1\u01ed"+
    "\13\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\12\33\1\u01ee\15\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\5\33\1\u01ef\3\33\1\u01f0\16\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\3\33\1\u01f1"+
    "\24\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\7\33\1\u014e\20\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\1\33\1\u01f2\26\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\3\33\1\u01f3\24\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\5\33\1\u01f4"+
    "\22\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\6\33\1\u01f5\21\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\3\33\1\u01eb\10\33\1\u01f6\13\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\6\33\1\u01f7"+
    "\21\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\14\33\1\332\13\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\12\33\1\u01f8\15\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\22\33\1\62\5\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\14\33\1\203"+
    "\13\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\11\33\1\u01f9\16\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\14\33\1\u01fa\13\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\4\33\1\u01fb\23\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\7\33\1\u01fc"+
    "\20\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\11\33\1\306\16\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\11\33\1\u0100\16\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\7\33\1\346\20\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\7\33\1\u01fd"+
    "\20\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\7\33\1\u01fe\20\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\11\33\1\u01ff\16\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\11\33\1\u0200\16\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\1\u0201\27\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\27\33"+
    "\1\u0174\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\11\33\1\u0202\16\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\7\33\1\u0197\20\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\7\33\1\u0203\20\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\14\33\1\211"+
    "\13\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\11\33\1\u0204\16\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\27\33\1\u0205\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\6\33\1\u0206\21\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\36\0\1\u01b2\27\0\14\33"+
    "\1\u0207\13\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\7\33\1\u0208\20\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\14\33\1\u0118\13\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\2\33\1\u0209\25\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\3\33"+
    "\1\u020a\24\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\11\33\1\u020b\16\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\6\33\1\u020c\21\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\1\56\27\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\26\33\1\u020d"+
    "\1\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\11\33\1\346\16\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\14\33\1\u0174\13\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\13\33\1\62\14\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\14\33\1\u020e"+
    "\13\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\1\u020f\27\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\1\u0210\27\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\3\33\1\u0211\24\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\26\33\1\u0120\1\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\5\33\1\u0212"+
    "\22\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\1\312\27\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\24\33\1\332\3\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\2\33\1\u0213\25\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\14\33\1\u01a9\13\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\11\33"+
    "\1\100\16\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\6\33\1\u0214\21\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\3\33\1\u0215\24\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\1\u0134\3\33\1\u0216"+
    "\23\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\3\33\1\u0217\24\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\33\0\1\u0218\32\0\12\33\1\306\15\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\6\33\1\u0219"+
    "\21\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\13\33\1\u021a\14\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\3\33\1\63\24\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\2\33\1\274\25\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\14\33\1\u021b"+
    "\13\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\11\33\1\u021c\16\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\12\33\1\u0156\15\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\10\33\1\u01d2\17\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\2\33\1\u021d"+
    "\25\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\7\33\1\u021e\20\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\12\33\1\u021f\15\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\10\33\1\u0220\17\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\23\33\1\u0221"+
    "\4\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\2\33\1\u0222\25\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\2\33\1\264\15\33\1\306\7\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\1\u0223\27\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\1\u0224"+
    "\27\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\11\33\1\u0225\16\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\11\33\1\355\16\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\10\33\1\254\17\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\5\33\1\352"+
    "\22\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\27\33\1\56\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\1\134\27\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\11\33\1\u0226\16\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\14\33\1\62\13\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\4\33\1\203"+
    "\23\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\14\33\1\u0227\13\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\3\33\1\u01b7\24\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\14\33\1\u0228\13\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\12\33\1\u0145"+
    "\15\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\12\33\1\u0229\15\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\1\u01e5\27\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\5\33\1\346\22\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\11\33\1\u022a\16\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\7\33"+
    "\1\155\20\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\11\33\1\u0145\16\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\11\33\1\72\16\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\27\33\1\u022b\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\10\33\1\u017a"+
    "\17\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\7\33\1\u022c\20\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\3\33\1\u01e5\24\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\13\33\1\u022d\14\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\14\33\1\72"+
    "\13\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\2\33\1\251\25\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\4\33\1\u022e\23\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\14\33\1\205\13\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\12\33\1\u022f"+
    "\15\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\20\33\1\247\7\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\21\33\1\332\6\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\1\u0230\27\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\7\33\1\u0231\20\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\11\33"+
    "\1\u0232\16\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\12\33\1\u0233\15\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\6\33\1\u0234\21\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\12\33\1\u0235\15\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\6\33"+
    "\1\u0236\21\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\11\33\1\u0237\16\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\25\33\1\u0238\2\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\12\33\1\u0118\15\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\23\33"+
    "\1\u0176\4\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\6\33\1\u0239\21\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\24\33\1\u023a\3\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\7\33\1\u0201\20\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\1\u023b"+
    "\27\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\1\162\27\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\12\33\1\u023c\15\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\1\u023d\27\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\12\33\1\u023e\15\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\11\0\1\u023f\54\0"+
    "\7\33\1\u0240\20\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\1\u0241\27\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\12\33\1\u0242\15\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\23\33\1\u0243\4\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\14\33"+
    "\1\u0244\13\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\6\33\1\u0245\21\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\6\33\1\247\7\33\1\u0246\11\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\3\33"+
    "\1\u01bd\24\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\11\33\1\u0199\16\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\4\33\1\u0247\23\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\6\33\1\u0174\21\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\6\33"+
    "\1\u0248\21\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\1\33\1\62\21\33\1\u0224\4\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\1\u0101\6\33\1\305"+
    "\20\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\1\33\1\u0244\26\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\12\33\1\264\15\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\13\33\1\u0249\14\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\11\33\1\u024a"+
    "\16\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\12\33\1\u024b\15\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\5\33\1\u01eb\22\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\7\33\1\u024c\20\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\21\33\1\u024d"+
    "\6\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\10\33\1\u0224\17\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\30\33\1\0\1\u024e\2\33\3\0\1\33"+
    "\21\0\1\33\2\0\17\33\1\u017a\10\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\21\33\1\65\6\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\11\33"+
    "\1\u024f\16\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\15\33\1\u0250\12\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\10\33\1\u0251\17\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\1\u0252\27\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\2\33\1\u0253"+
    "\25\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\26\33\1\u0254\1\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\7\33\1\u0255\20\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\6\33\1\u0256\21\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\20\33\1\u016f"+
    "\7\33\1\0\3\33\3\0\1\33\21\0\1\33\12\0"+
    "\1\u0257\53\0\11\33\1\u0258\16\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\2\33\1\u0259\25\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\3\33\1\u025a"+
    "\24\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\7\33\1\305\20\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\25\33\1\u025b\2\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\6\33\1\u025c\21\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\15\33\1\u025d"+
    "\12\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\10\33\1\u025e\17\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\21\33\1\u022d\6\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\10\33\1\372\17\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\21\33\1\372"+
    "\6\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\14\33\1\u025f\13\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\6\33\1\u0259\21\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\10\33\1\u0176\17\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\1\u0260\27\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\2\33"+
    "\1\u0261\17\33\1\u0262\5\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\2\33\1\u0263\25\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\7\33\1\203\20\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\23\33"+
    "\1\170\4\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\25\33\1\u0264\2\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\7\33\1\56\1\33\1\u013f\16\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\12\33"+
    "\1\u0265\15\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\6\33\1\u0266\21\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\12\33\1\307\15\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\5\33\1\u0146\1\u0267"+
    "\4\33\1\355\14\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\7\33\1\u0268\20\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\10\33\1\u025e\14\33\1\u0269"+
    "\2\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\3\33\1\u0120\24\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\3\33\1\u011f\24\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\5\33\1\u026a\22\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\11\33\1\u026b"+
    "\16\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\7\33\1\u026c\20\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\3\33\1\u026d\24\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\16\33\1\u026e\7\33\1\u026f"+
    "\1\33\1\0\3\33\3\0\1\33\21\0\1\33\2\0"+
    "\6\33\1\u01fc\21\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\1\u0101\27\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\11\33\1\u0270\16\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\14\33\1\u01c1\13\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\11\33"+
    "\1\u0271\16\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\13\33\1\u0172\14\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\26\33\1\u0272\1\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\15\33\1\u0273\12\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\5\33"+
    "\1\u0274\22\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\3\33\1\u0275\24\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\11\33\1\u0276\16\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\26\33\1\u01a1\1\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\12\33"+
    "\1\u0277\15\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\11\33\1\u0278\16\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\23\33\1\u0279\4\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\14\33\1\274\13\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\5\33"+
    "\1\u0117\22\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\12\33\1\u0171\15\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\2\33\1\u016f\25\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\4\33\1\u027a\23\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\16\33"+
    "\1\u027b\11\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\1\u027c\27\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\14\33\1\u027d\13\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\14\33\1\u027e\13\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\1\u027f\27\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\11\33"+
    "\1\u0280\16\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\2\33\1\u0281\25\33\1\0\3\33\3\0\1\33"+
    "\21\0\1\33\2\0\6\33\1\u0282\21\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\7\33\1\u0283\20\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\15\33"+
    "\1\u0284\12\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\6\33\1\u0266\4\33\1\u0285\14\33\1\0\3\33"+
    "\3\0\1\33\21\0\1\33\2\0\7\33\1\u0286\20\33"+
    "\1\0\3\33\3\0\1\33\21\0\1\33\2\0\6\33"+
    "\1\u0287\21\33\1\0\3\33\3\0\1\33\21\0\1\33"+
    "\2\0\1\u0288\27\33\1\0\3\33\3\0\1\33\21\0"+
    "\1\33\2\0\11\33\1\u0289\16\33\1\0\3\33\3\0"+
    "\1\33\21\0\1\33\2\0\4\33\1\u028a\23\33\1\0"+
    "\3\33\3\0\1\33\21\0\1\33\2\0\2\33\1\u0283"+
    "\25\33\1\0\3\33\3\0\1\33\21\0\1\33\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32812];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\2\11\200\1\2\11\1\0\226\1"+
    "\1\0\47\1\1\0\120\1\1\11\34\1\1\0\107\1"+
    "\1\0\46\1\1\0\27\1\1\11\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[650];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

	public class MyTOKEN {
			String Token;
			String tipo;
			int columna;
			int fila;

			public MyTOKEN(String Tk, String ti, int col, int fil){
				Token = Tk;
				tipo = ti;
				columna = col;
				fila = fil;
			}
	}

	public int noToken = 0;	

    String File = "";
    String ArchivoEscribir = "";
    Scanner scanner = new Scanner(System.in);

	public void nextToken() {

	}

	public void Advertencia(int col, int fil) {
			System.out.println("---- Advertencia: identificador en la linea " + fil + " columna " + col + " excede la longitud permitida, sera truncado. ----");
	};

	public void ErrorLexico(String token) {
			if(token.equals('\'')){

			}
	};

	

	public List<MyTOKEN> TOKENS = new ArrayList<MyTOKEN>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiniSQL(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	
	AnalizadorSintactico anal = new AnalizadorSintactico();
	

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //ArchivoEscribir = ArchivoEscribir + "Error en la col: " + yycolumn + " fila: " + yyline + " Caracter no Reconocido" + "\n";
            } 
            // fall through
          case 14: break;
          case 2: 
            { if(yylength() < 31)
	{
		TOKENS.add(new MyTOKEN(yytext(), "Identificador", yycolumn, yyline));
	}else{
		Advertencia(yyline, yycolumn);
		TOKENS.add(new MyTOKEN(yytext(), "Identificador", yycolumn, yyline)); 
	}
            } 
            // fall through
          case 15: break;
          case 3: 
            { TOKENS.add(new MyTOKEN(yytext(), "Boolean", yycolumn, yyline));
            } 
            // fall through
          case 16: break;
          case 4: 
            { TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
            } 
            // fall through
          case 17: break;
          case 5: 
            { TOKENS.add(new MyTOKEN(yytext(), "Entero", yycolumn, yyline));
            } 
            // fall through
          case 18: break;
          case 6: 
            { TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
            } 
            // fall through
          case 19: break;
          case 7: 
            { //ArchivoEscribir = ArchivoEscribir + "Error en la col: " + yycolumn + " fila: " + yyline + " Cadena sin cerrar"+ "\n";
            } 
            // fall through
          case 20: break;
          case 8: 
            { /*Hacer nada equisde*/
            } 
            // fall through
          case 21: break;
          case 9: 
            { TOKENS.add(new MyTOKEN(yytext(), "Reservada", yycolumn, yyline));
            } 
            // fall through
          case 22: break;
          case 10: 
            { TOKENS.add(new MyTOKEN(yytext(), "Comentario.Linea", yycolumn, yyline));
            } 
            // fall through
          case 23: break;
          case 11: 
            { TOKENS.add(new MyTOKEN(yytext(), "Float", yycolumn, yyline));
            } 
            // fall through
          case 24: break;
          case 12: 
            { TOKENS.add(new MyTOKEN(yytext(), "Cadena", yycolumn, yyline));
            } 
            // fall through
          case 25: break;
          case 13: 
            { TOKENS.add(new MyTOKEN(yytext(), "Comentario.Multilinea", yycolumn, yyline));
            } 
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java MiniSQL [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        MiniSQL scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new MiniSQL(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
