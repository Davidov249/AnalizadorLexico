/* The following code was generated by JFlex 1.7.0 */

package Analizadores;

import java.lang.Object;
import java.lang.String;
import java.io.PrintWriter;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.lang.System;
import java.io.Console;
import java.io.InputStream;
import java.util.Scanner;
import java_cup.runtime.*;
//import MiniSQL;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\70\1\44\3\70\22\0\1\70\1\53\1\0\1\66\1\0"+
    "\1\47\1\54\1\43\1\61\1\62\1\46\1\42\1\56\1\31\1\40"+
    "\1\45\2\35\10\36\1\0\1\55\1\52\1\51\1\50\1\0\1\65"+
    "\1\1\1\2\1\11\1\14\1\10\1\30\1\22\1\17\1\12\1\33"+
    "\1\23\1\5\1\27\1\13\1\4\1\24\1\34\1\15\1\3\1\7"+
    "\1\6\1\21\1\25\1\32\1\16\1\20\1\57\1\0\1\60\1\0"+
    "\1\26\1\0\4\67\1\41\25\67\1\63\1\37\1\64\7\0\1\70"+
    "\32\0\1\70\u15df\0\1\70\u097f\0\13\70\35\0\2\70\5\0\1\70"+
    "\57\0\1\70\u0fa0\0\1\70\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\4\2\2\3\4\2\1\3\14\2\1\4"+
    "\2\2\1\5\1\6\1\3\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\1"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\2\1\34\2\2\1\35\13\2\1\36"+
    "\16\2\1\37\1\40\2\2\1\41\11\2\1\42\17\2"+
    "\1\43\1\44\2\2\1\45\1\2\1\46\25\2\1\47"+
    "\34\2\1\50\1\2\1\51\1\52\1\53\1\11\1\0"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\2\2\1\65\1\66\3\2\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\5\2\1\75\5\2\1\76\3\2"+
    "\1\77\11\2\1\100\7\2\1\101\13\2\1\102\10\2"+
    "\1\103\12\2\1\104\26\2\1\105\11\2\1\106\7\2"+
    "\1\107\7\2\1\110\34\2\1\111\2\2\1\112\2\2"+
    "\1\113\20\2\1\114\3\2\1\115\2\2\1\116\11\2"+
    "\1\51\2\0\7\2\1\117\1\120\5\2\1\121\1\122"+
    "\13\2\1\123\13\2\1\124\1\2\1\125\1\2\1\126"+
    "\1\2\1\127\1\2\1\130\4\2\1\131\1\2\1\132"+
    "\1\2\1\133\13\2\1\134\1\2\1\135\1\136\2\2"+
    "\1\137\1\2\1\140\1\2\1\141\1\0\3\2\1\142"+
    "\2\2\1\143\1\144\1\145\23\2\1\146\3\2\1\147"+
    "\15\2\1\150\1\2\1\151\1\2\1\152\2\2\1\153"+
    "\1\154\2\2\1\155\1\2\1\156\3\2\1\157\5\2"+
    "\1\160\1\161\2\2\1\162\2\2\1\163\1\164\1\165"+
    "\11\2\1\166\2\2\1\167\1\170\3\2\1\171\1\172"+
    "\3\2\1\173\3\2\1\174\3\2\1\175\10\2\1\176"+
    "\1\177\1\2\1\200\14\2\1\201\3\2\1\202\1\2"+
    "\1\203\1\2\1\204\1\51\1\0\1\205\3\2\1\206"+
    "\4\2\1\207\2\2\1\210\15\2\1\211\3\2\1\212"+
    "\2\2\1\213\2\2\1\214\10\2\1\215\1\216\1\2"+
    "\1\217\1\2\1\220\1\221\1\222\4\2\1\223\1\224"+
    "\13\2\1\0\14\2\1\225\10\2\1\226\3\2\1\227"+
    "\3\2\1\230\7\2\1\231\1\232\1\2\1\233\4\2"+
    "\1\234\4\2\1\235\34\2\1\236\2\2\1\237\3\2"+
    "\1\240\1\241\5\2\1\242\4\2\1\243\1\244\4\2"+
    "\1\245\1\2\1\246\1\247\1\250\1\251\1\2\1\252"+
    "\1\2\1\253\1\254\2\2\1\255\1\2\1\256\1\2"+
    "\1\257\1\2\1\205\4\2\1\260\1\261\2\2\1\262"+
    "\3\2\1\263\1\2\1\264\3\2\1\265\1\266\7\2"+
    "\1\267\2\2\1\270\4\2\1\271\2\2\1\272\1\273"+
    "\2\2\1\274\14\2\1\275\1\0\1\276\3\2\1\277"+
    "\1\300\5\2\1\301\7\2\1\302\1\2\1\303\1\2"+
    "\1\304\5\2\1\305\14\2\1\306\2\2\1\307\1\310"+
    "\2\2\1\311\20\2\1\312\1\2\1\313\1\314\2\2"+
    "\1\315\1\2\1\316\2\2\1\317\1\320\2\2\1\321"+
    "\13\2\1\322\1\323\11\2\1\324\3\2\1\325\1\326"+
    "\1\2\1\327\6\2\1\330\5\2\1\331\2\2\1\332"+
    "\1\333\1\334\2\2\1\335\10\2\1\336\1\2\1\0"+
    "\1\2\1\337\1\340\1\2\1\341\1\342\2\2\1\343"+
    "\3\2\1\344\1\345\1\2\1\346\1\2\1\347\10\2"+
    "\1\350\1\351\4\2\1\352\1\2\1\353\1\2\1\354"+
    "\4\2\1\355\1\356\1\357\13\2\1\360\2\2\1\361"+
    "\4\2\1\362\1\363\1\364\1\2\1\365\3\2\1\366"+
    "\1\2\1\367\1\370\3\2\1\371\1\372\3\2\1\373"+
    "\1\2\1\374\10\2\1\375\1\376\1\377\1\u0100\2\2"+
    "\1\u0101\3\2\1\u0102\3\2\1\u0103\2\2\1\u0104\2\2"+
    "\1\u0105\1\2\1\u0106\1\u0107\1\2\1\u0108\1\2\1\u0109"+
    "\1\2\1\u010a\1\u010b\13\2\1\u010c\2\2\1\u010d\1\2"+
    "\1\u010e\1\2\1\u010f\1\2\1\u0110\2\2\1\u0111\2\2"+
    "\1\u0112\2\2\1\u0113\1\u0114\1\2\1\u0115\1\u0116\1\u0117"+
    "\3\2\1\u0118\1\u0119\1\2\1\u011a\4\2\1\u011b\1\u011c"+
    "\1\2\1\u011d\1\u011e\2\2\1\u011f\12\2\1\u0120\2\2"+
    "\1\u0121\1\u0122\2\2\1\u0123\2\2\1\u0124\5\2\1\u0125"+
    "\3\2\1\u0126\3\2\1\u0127\1\2\1\u0128\1\u0129\1\u012a"+
    "\2\2\1\u012b\5\2\1\u012c\1\2\1\u012d\4\2\1\u012e"+
    "\1\u012f\2\2\1\u0130\3\2\1\u0131\1\u0132\5\2\1\u0133"+
    "\2\2\1\u0134\1\u0135\6\2\1\u0136\1\u0137\1\2\1\u0138"+
    "\6\2\1\u0139\4\2\1\u013a\1\u013b\1\u013c\1\2\1\u013d"+
    "\1\u013e\2\2\1\u013f\1\u0140\1\2\1\u0141\6\2\1\u0142"+
    "\2\2\1\u0143\2\2\1\u0144\1\u0145\1\u0146\1\u0147\6\2"+
    "\1\u0148\1\u0149\1\u014a\2\2\1\u014b\1\u014c\1\u014d\1\u014e"+
    "\2\2\1\u014f\3\2\1\u0150\5\2\1\u0151\1\u0152\1\u0153"+
    "\2\2\1\u0154\1\2\1\u0155\1\u0156\3\2\1\u0157\1\2"+
    "\1\u0158\1\u0159\3\2\1\u015a\2\2\1\u015b\6\2\1\u015c"+
    "\2\2\1\u015d\6\2\1\u015e\1\u015f\15\2\1\u0160\1\u0161"+
    "\7\2\1\u0162";

  private static int [] zzUnpackAction() {
    int [] result = new int[1400];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u063c\0\u0675\0\71"+
    "\0\71\0\u06ae\0\u06e7\0\u0720\0\71\0\71\0\u0759\0\u0792"+
    "\0\u07cb\0\u0804\0\u083d\0\71\0\71\0\u0876\0\71\0\u08af"+
    "\0\71\0\u08e8\0\71\0\71\0\u0921\0\u095a\0\u0993\0\u09cc"+
    "\0\u0a05\0\u05ca\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u05ca\0\u0cb1\0\u0cea"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242"+
    "\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a"+
    "\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2"+
    "\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u05ca\0\u1761"+
    "\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929"+
    "\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1"+
    "\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9"+
    "\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81"+
    "\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049"+
    "\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211"+
    "\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\71\0\71"+
    "\0\71\0\u23a0\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\u23d9\0\u2412\0\u05ca\0\u244b\0\u2484"+
    "\0\u24bd\0\u24f6\0\u05ca\0\u05ca\0\u05ca\0\u05ca\0\u05ca\0\u05ca"+
    "\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be"+
    "\0\u26f7\0\u2730\0\u2769\0\u05ca\0\u27a2\0\u27db\0\u2814\0\u284d"+
    "\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15"+
    "\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd"+
    "\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5"+
    "\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d"+
    "\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\u05ca\0\u30fc"+
    "\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4"+
    "\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c"+
    "\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654"+
    "\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c"+
    "\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4"+
    "\0\u3a1d\0\u3a56\0\u05ca\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73"+
    "\0\u3bac\0\u3be5\0\u05ca\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02"+
    "\0\u3d3b\0\u3d74\0\u3dad\0\u3de6\0\u3e1f\0\u3e58\0\u3e91\0\u3eca"+
    "\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092"+
    "\0\u40cb\0\u4104\0\u413d\0\u4176\0\u41af\0\u41e8\0\u4221\0\u425a"+
    "\0\u4293\0\u42cc\0\u4305\0\u433e\0\u4377\0\u43b0\0\u43e9\0\u05ca"+
    "\0\u4422\0\u445b\0\u05ca\0\u4494\0\u44cd\0\u05ca\0\u4506\0\u453f"+
    "\0\u4578\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce\0\u4707"+
    "\0\u4740\0\u4779\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u05ca\0\u4896"+
    "\0\u48cf\0\u4908\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\u4a5e"+
    "\0\u4a97\0\u4ad0\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4\0\u4bed\0\u4c26"+
    "\0\u4c5f\0\u4c98\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c\0\u4db5\0\u4dee"+
    "\0\u4e27\0\u05ca\0\u05ca\0\u4e60\0\u4e99\0\u4ed2\0\u4f0b\0\u4f44"+
    "\0\u05ca\0\u05ca\0\u4f7d\0\u4fb6\0\u4fef\0\u5028\0\u5061\0\u509a"+
    "\0\u50d3\0\u510c\0\u5145\0\u517e\0\u51b7\0\u05ca\0\u51f0\0\u5229"+
    "\0\u5262\0\u529b\0\u52d4\0\u530d\0\u5346\0\u537f\0\u53b8\0\u53f1"+
    "\0\u542a\0\u05ca\0\u5463\0\u549c\0\u54d5\0\u550e\0\u5547\0\u05ca"+
    "\0\u5580\0\u05ca\0\u55b9\0\u55f2\0\u562b\0\u5664\0\u05ca\0\u569d"+
    "\0\u05ca\0\u56d6\0\u05ca\0\u570f\0\u5748\0\u5781\0\u57ba\0\u57f3"+
    "\0\u582c\0\u5865\0\u589e\0\u58d7\0\u5910\0\u5949\0\u5982\0\u59bb"+
    "\0\u59f4\0\u05ca\0\u5a2d\0\u5a66\0\u05ca\0\u5a9f\0\u05ca\0\u5ad8"+
    "\0\u05ca\0\u5b11\0\u5b4a\0\u5b83\0\u5bbc\0\u5bf5\0\u5c2e\0\u5c67"+
    "\0\u05ca\0\u05ca\0\u05ca\0\u5ca0\0\u5cd9\0\u5d12\0\u5d4b\0\u5d84"+
    "\0\u5dbd\0\u5df6\0\u5e2f\0\u5e68\0\u5ea1\0\u5eda\0\u5f13\0\u5f4c"+
    "\0\u5f85\0\u5fbe\0\u5ff7\0\u6030\0\u6069\0\u60a2\0\u60db\0\u6114"+
    "\0\u614d\0\u6186\0\u05ca\0\u61bf\0\u61f8\0\u6231\0\u626a\0\u62a3"+
    "\0\u62dc\0\u6315\0\u634e\0\u6387\0\u63c0\0\u63f9\0\u6432\0\u646b"+
    "\0\u05ca\0\u64a4\0\u64dd\0\u6516\0\u05ca\0\u654f\0\u6588\0\u05ca"+
    "\0\u05ca\0\u65c1\0\u65fa\0\u05ca\0\u6633\0\u666c\0\u66a5\0\u66de"+
    "\0\u6717\0\u05ca\0\u6750\0\u6789\0\u67c2\0\u67fb\0\u6834\0\u05ca"+
    "\0\u05ca\0\u686d\0\u68a6\0\u05ca\0\u68df\0\u6918\0\u05ca\0\u05ca"+
    "\0\u6951\0\u698a\0\u69c3\0\u69fc\0\u6a35\0\u6a6e\0\u6aa7\0\u6ae0"+
    "\0\u6b19\0\u6b52\0\u05ca\0\u6b8b\0\u6bc4\0\u05ca\0\u05ca\0\u6bfd"+
    "\0\u6c36\0\u6c6f\0\u05ca\0\u05ca\0\u6ca8\0\u6ce1\0\u6d1a\0\u05ca"+
    "\0\u6d53\0\u6d8c\0\u6dc5\0\u05ca\0\u6dfe\0\u6e37\0\u6e70\0\u6ea9"+
    "\0\u6ee2\0\u6f1b\0\u6f54\0\u6f8d\0\u6fc6\0\u6fff\0\u7038\0\u7071"+
    "\0\u05ca\0\u70aa\0\u70e3\0\u711c\0\u7155\0\u718e\0\u71c7\0\u7200"+
    "\0\u7239\0\u7272\0\u72ab\0\u72e4\0\u731d\0\u7356\0\u738f\0\u73c8"+
    "\0\u05ca\0\u7401\0\u743a\0\u7473\0\u05ca\0\u74ac\0\u05ca\0\u74e5"+
    "\0\u05ca\0\u751e\0\u7557\0\u4c5f\0\u7590\0\u75c9\0\u7602\0\u05ca"+
    "\0\u763b\0\u7674\0\u76ad\0\u76e6\0\u05ca\0\u771f\0\u7758\0\u05ca"+
    "\0\u7791\0\u77ca\0\u7803\0\u783c\0\u7875\0\u78ae\0\u78e7\0\u7920"+
    "\0\u7959\0\u7992\0\u79cb\0\u7a04\0\u7a3d\0\u05ca\0\u7a76\0\u7aaf"+
    "\0\u7ae8\0\u05ca\0\u7b21\0\u7b5a\0\u05ca\0\u7b93\0\u7bcc\0\u05ca"+
    "\0\u7c05\0\u7c3e\0\u7c77\0\u7cb0\0\u7ce9\0\u7d22\0\u7d5b\0\u7d94"+
    "\0\u05ca\0\u05ca\0\u7dcd\0\u05ca\0\u7e06\0\u05ca\0\u05ca\0\u05ca"+
    "\0\u7e3f\0\u7e78\0\u7eb1\0\u7eea\0\u05ca\0\u7f23\0\u7f5c\0\u7f95"+
    "\0\u7fce\0\u8007\0\u8040\0\u8079\0\u80b2\0\u80eb\0\u8124\0\u815d"+
    "\0\u8196\0\u81cf\0\u8208\0\u8241\0\u827a\0\u82b3\0\u82ec\0\u8325"+
    "\0\u835e\0\u8397\0\u83d0\0\u8409\0\u8442\0\u847b\0\u05ca\0\u84b4"+
    "\0\u84ed\0\u8526\0\u855f\0\u8598\0\u85d1\0\u860a\0\u8643\0\u05ca"+
    "\0\u867c\0\u86b5\0\u86ee\0\u05ca\0\u8727\0\u8760\0\u8799\0\u87d2"+
    "\0\u880b\0\u8844\0\u887d\0\u88b6\0\u88ef\0\u8928\0\u8961\0\u05ca"+
    "\0\u05ca\0\u899a\0\u05ca\0\u89d3\0\u8a0c\0\u8a45\0\u8a7e\0\u05ca"+
    "\0\u8ab7\0\u8af0\0\u8b29\0\u8b62\0\u05ca\0\u8b9b\0\u8bd4\0\u8c0d"+
    "\0\u8c46\0\u8c7f\0\u8cb8\0\u8cf1\0\u8d2a\0\u8d63\0\u8d9c\0\u8dd5"+
    "\0\u8e0e\0\u8e47\0\u8e80\0\u8eb9\0\u8ef2\0\u8f2b\0\u8f64\0\u8f9d"+
    "\0\u8fd6\0\u900f\0\u9048\0\u9081\0\u90ba\0\u90f3\0\u912c\0\u9165"+
    "\0\u919e\0\u05ca\0\u91d7\0\u9210\0\u9249\0\u9282\0\u92bb\0\u92f4"+
    "\0\u05ca\0\u05ca\0\u932d\0\u9366\0\u939f\0\u93d8\0\u9411\0\u05ca"+
    "\0\u944a\0\u9483\0\u94bc\0\u94f5\0\u05ca\0\u05ca\0\u952e\0\u9567"+
    "\0\u95a0\0\u95d9\0\u9612\0\u964b\0\u05ca\0\u05ca\0\u05ca\0\u05ca"+
    "\0\u9684\0\u05ca\0\u96bd\0\u05ca\0\u05ca\0\u96f6\0\u972f\0\u05ca"+
    "\0\u9768\0\u05ca\0\u97a1\0\u05ca\0\u97da\0\71\0\u9813\0\u984c"+
    "\0\u9885\0\u98be\0\u05ca\0\u05ca\0\u98f7\0\u9930\0\u05ca\0\u9969"+
    "\0\u99a2\0\u99db\0\u05ca\0\u9a14\0\u05ca\0\u9a4d\0\u9a86\0\u9abf"+
    "\0\u05ca\0\u05ca\0\u9af8\0\u9b31\0\u9b6a\0\u9ba3\0\u9bdc\0\u9c15"+
    "\0\u9c4e\0\u05ca\0\u9c87\0\u9cc0\0\u05ca\0\u9cf9\0\u9d32\0\u9d6b"+
    "\0\u9da4\0\u05ca\0\u9ddd\0\u9e16\0\u05ca\0\u05ca\0\u9e4f\0\u9e88"+
    "\0\u9ec1\0\u9efa\0\u9f33\0\u9f6c\0\u9fa5\0\u9fde\0\ua017\0\ua050"+
    "\0\ua089\0\ua0c2\0\ua0fb\0\ua134\0\ua16d\0\u05ca\0\ua1a6\0\u05ca"+
    "\0\ua1df\0\ua218\0\ua251\0\ua28a\0\u05ca\0\ua2c3\0\ua2fc\0\ua335"+
    "\0\ua36e\0\ua3a7\0\u05ca\0\ua3e0\0\ua419\0\ua452\0\ua48b\0\ua4c4"+
    "\0\ua4fd\0\ua536\0\u05ca\0\ua56f\0\u05ca\0\ua5a8\0\u05ca\0\ua5e1"+
    "\0\ua61a\0\ua653\0\ua68c\0\ua6c5\0\u05ca\0\ua6fe\0\ua737\0\ua770"+
    "\0\ua7a9\0\ua7e2\0\ua81b\0\ua854\0\ua88d\0\ua8c6\0\ua8ff\0\ua938"+
    "\0\ua971\0\u05ca\0\ua9aa\0\ua9e3\0\u05ca\0\u05ca\0\uaa1c\0\uaa55"+
    "\0\u05ca\0\uaa8e\0\uaac7\0\uab00\0\uab39\0\uab72\0\uabab\0\uabe4"+
    "\0\uac1d\0\uac56\0\uac8f\0\uacc8\0\uad01\0\uad3a\0\uad73\0\uadac"+
    "\0\uade5\0\uae1e\0\uae57\0\u05ca\0\u05ca\0\uae90\0\uaec9\0\u05ca"+
    "\0\uaf02\0\u05ca\0\uaf3b\0\uaf74\0\u05ca\0\u05ca\0\uafad\0\uafe6"+
    "\0\u05ca\0\ub01f\0\ub058\0\ub091\0\ub0ca\0\ub103\0\ub13c\0\ub175"+
    "\0\ub1ae\0\ub1e7\0\ub220\0\ub259\0\u05ca\0\u05ca\0\ub292\0\ub2cb"+
    "\0\ub304\0\ub33d\0\ub376\0\ub3af\0\ub3e8\0\ub421\0\ub45a\0\u05ca"+
    "\0\ub493\0\ub4cc\0\ub505\0\ub53e\0\u05ca\0\ub577\0\u05ca\0\ub5b0"+
    "\0\ub5e9\0\ub622\0\ub65b\0\ub694\0\ub6cd\0\u05ca\0\ub706\0\ub73f"+
    "\0\ub778\0\ub7b1\0\ub7ea\0\u05ca\0\ub823\0\ub85c\0\u05ca\0\u05ca"+
    "\0\u05ca\0\ub895\0\ub8ce\0\u05ca\0\ub907\0\ub940\0\ub979\0\ub9b2"+
    "\0\ub9eb\0\uba24\0\uba5d\0\uba96\0\u05ca\0\ubacf\0\ubb08\0\ubb41"+
    "\0\u05ca\0\u05ca\0\ubb7a\0\ubbb3\0\u05ca\0\ubbec\0\ubc25\0\u05ca"+
    "\0\ubc5e\0\ubc97\0\ubcd0\0\ubd09\0\u05ca\0\ubd42\0\u05ca\0\ubd7b"+
    "\0\ubdb4\0\ubded\0\ube26\0\ube5f\0\ube98\0\ubed1\0\ubf0a\0\ubf43"+
    "\0\ubf7c\0\u05ca\0\u05ca\0\ubfb5\0\ubfee\0\uc027\0\uc060\0\u05ca"+
    "\0\uc099\0\u05ca\0\uc0d2\0\u05ca\0\uc10b\0\uc144\0\uc17d\0\uc1b6"+
    "\0\u05ca\0\u05ca\0\u05ca\0\uc1ef\0\uc228\0\uc261\0\uc29a\0\uc2d3"+
    "\0\uc30c\0\uc345\0\uc37e\0\uc3b7\0\uc3f0\0\uc429\0\u05ca\0\uc462"+
    "\0\uc49b\0\u05ca\0\uc4d4\0\uc50d\0\uc546\0\uc57f\0\u05ca\0\u05ca"+
    "\0\u05ca\0\uc5b8\0\u05ca\0\uc5f1\0\uc62a\0\uc663\0\u05ca\0\uc69c"+
    "\0\u05ca\0\u05ca\0\uc6d5\0\uc70e\0\uc747\0\u05ca\0\u05ca\0\uc780"+
    "\0\uc7b9\0\uc7f2\0\u05ca\0\uc82b\0\u05ca\0\uc864\0\uc89d\0\uc8d6"+
    "\0\uc90f\0\uc948\0\uc981\0\uc9ba\0\uc9f3\0\u05ca\0\u05ca\0\u05ca"+
    "\0\u05ca\0\uca2c\0\uca65\0\u05ca\0\uca9e\0\ucad7\0\ucb10\0\u05ca"+
    "\0\ucb49\0\ucb82\0\ucbbb\0\u05ca\0\ucbf4\0\ucc2d\0\u05ca\0\ucc66"+
    "\0\ucc9f\0\u05ca\0\uccd8\0\71\0\u05ca\0\ucd11\0\u05ca\0\ucd4a"+
    "\0\u05ca\0\ucd83\0\ucdbc\0\u05ca\0\ucdf5\0\uce2e\0\uce67\0\ucea0"+
    "\0\uced9\0\ucf12\0\ucf4b\0\ucf84\0\ucfbd\0\ucff6\0\ud02f\0\u05ca"+
    "\0\ud068\0\ud0a1\0\ud0da\0\ud113\0\u05ca\0\ud14c\0\u05ca\0\ud185"+
    "\0\u05ca\0\ud1be\0\ud1f7\0\u05ca\0\ud230\0\ud269\0\u05ca\0\ud2a2"+
    "\0\ud2db\0\u05ca\0\u05ca\0\ud314\0\u05ca\0\u05ca\0\u05ca\0\ud34d"+
    "\0\ud386\0\ud3bf\0\u05ca\0\u05ca\0\ud3f8\0\u05ca\0\ud431\0\ud46a"+
    "\0\ud4a3\0\ud4dc\0\u05ca\0\u05ca\0\ud515\0\ud54e\0\u05ca\0\ud587"+
    "\0\ud5c0\0\u05ca\0\ud5f9\0\ud632\0\ud66b\0\ud6a4\0\ud6dd\0\ud716"+
    "\0\ud74f\0\ud788\0\ud7c1\0\ud7fa\0\u05ca\0\ud833\0\ud86c\0\u05ca"+
    "\0\u05ca\0\ud8a5\0\ud8de\0\u05ca\0\ud917\0\ud950\0\u05ca\0\ud989"+
    "\0\ud9c2\0\ud9fb\0\uda34\0\uda6d\0\u05ca\0\udaa6\0\udadf\0\udb18"+
    "\0\u05ca\0\udb51\0\udb8a\0\udbc3\0\u05ca\0\udbfc\0\u05ca\0\u05ca"+
    "\0\u05ca\0\udc35\0\udc6e\0\u05ca\0\udca7\0\udce0\0\udd19\0\udd52"+
    "\0\udd8b\0\u05ca\0\uddc4\0\u05ca\0\uddfd\0\ude36\0\ude6f\0\udea8"+
    "\0\u05ca\0\u05ca\0\udee1\0\udf1a\0\u05ca\0\udf53\0\udf8c\0\udfc5"+
    "\0\u05ca\0\u05ca\0\udffe\0\ue037\0\ue070\0\ue0a9\0\ue0e2\0\u05ca"+
    "\0\ue11b\0\ue154\0\u05ca\0\u05ca\0\ue18d\0\ue1c6\0\ue1ff\0\ue238"+
    "\0\ue271\0\ue2aa\0\u05ca\0\ue2e3\0\ue31c\0\u05ca\0\ue355\0\ue38e"+
    "\0\ue3c7\0\ue400\0\ue439\0\ue472\0\u05ca\0\ue4ab\0\ue4e4\0\ue51d"+
    "\0\ue556\0\u05ca\0\u05ca\0\u05ca\0\ue58f\0\u05ca\0\u05ca\0\ue5c8"+
    "\0\ue601\0\u05ca\0\u05ca\0\ue63a\0\u05ca\0\ue673\0\ue6ac\0\ue6e5"+
    "\0\ue71e\0\ue757\0\ue790\0\u05ca\0\ue7c9\0\ue802\0\u05ca\0\ue83b"+
    "\0\ue874\0\u05ca\0\u05ca\0\u05ca\0\u05ca\0\ue8ad\0\ue8e6\0\ue91f"+
    "\0\ue958\0\ue991\0\ue9ca\0\u05ca\0\u05ca\0\u05ca\0\uea03\0\uea3c"+
    "\0\u05ca\0\u05ca\0\u05ca\0\u05ca\0\uea75\0\ueaae\0\u05ca\0\ueae7"+
    "\0\ueb20\0\ueb59\0\u05ca\0\ueb92\0\uebcb\0\uec04\0\uec3d\0\uec76"+
    "\0\u05ca\0\uecaf\0\u05ca\0\uece8\0\ued21\0\u05ca\0\ued5a\0\u05ca"+
    "\0\u05ca\0\ued93\0\uedcc\0\uee05\0\u05ca\0\uee3e\0\u05ca\0\u05ca"+
    "\0\uee77\0\ueeb0\0\ueee9\0\u05ca\0\uef22\0\uef5b\0\u05ca\0\uef94"+
    "\0\uefcd\0\uf006\0\uf03f\0\uf078\0\uf0b1\0\u05ca\0\uf0ea\0\uf123"+
    "\0\u05ca\0\uf15c\0\uf195\0\uf1ce\0\uf207\0\uf240\0\uf279\0\u05ca"+
    "\0\u05ca\0\uf2b2\0\uf2eb\0\uf324\0\uf35d\0\uf396\0\uf3cf\0\uf408"+
    "\0\uf441\0\uf47a\0\uf4b3\0\uf4ec\0\uf525\0\uf55e\0\u05ca\0\u05ca"+
    "\0\uf597\0\uf5d0\0\uf609\0\uf642\0\uf67b\0\uf6b4\0\uf6ed\0\u05ca";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1400];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\2\1\30"+
    "\1\31\1\32\1\33\1\34\1\33\1\35\1\36\1\37"+
    "\1\40\1\33\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\33"+
    "\1\43\72\0\1\33\1\66\1\67\1\33\1\70\1\71"+
    "\1\72\1\33\1\73\1\33\1\74\1\75\1\76\3\33"+
    "\1\77\7\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\1\100\2\33\1\101\1\33\1\102\1\33\1\103"+
    "\1\33\1\104\2\33\1\105\1\106\12\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\107\2\33\1\110"+
    "\1\33\1\111\1\112\1\113\1\114\1\115\3\33\1\116"+
    "\1\117\4\33\1\120\2\33\1\121\1\33\1\0\2\33"+
    "\1\122\2\33\2\0\1\33\25\0\1\33\2\0\5\33"+
    "\1\123\2\33\1\124\1\33\1\125\1\33\1\126\3\33"+
    "\1\127\2\33\1\130\3\33\1\131\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\1\132\2\33\1\133\3\33"+
    "\1\134\1\33\1\135\16\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\2\33\1\136\7\33\1\137\10\33"+
    "\1\140\4\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\1\141\1\33\1\142\1\143\3\33\1\144\1\33"+
    "\1\145\2\33\1\146\1\33\1\147\11\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\2\33\1\150\1\33"+
    "\1\151\5\33\1\152\1\33\1\153\13\33\1\0\1\154"+
    "\4\33\2\0\1\33\25\0\1\33\2\0\1\155\2\33"+
    "\1\156\1\157\1\160\6\33\1\161\1\33\1\162\11\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\2\33"+
    "\1\163\7\33\1\164\1\165\12\33\1\166\1\167\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\170\2\33"+
    "\1\171\1\33\1\172\1\33\1\173\1\174\17\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\175\1\176"+
    "\1\33\1\177\1\33\1\200\1\33\1\201\1\33\1\202"+
    "\2\33\1\203\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\1\204\2\33\1\205\1\33\1\206\1\33"+
    "\1\207\1\33\1\210\16\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\211\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\212\2\33\1\213"+
    "\24\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\3\33\1\214\24\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\1\215\10\33\1\216\16\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\3\33\1\217\1\220"+
    "\2\33\1\221\4\33\1\222\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\223\1\33\1\224"+
    "\16\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\225\2\33\1\226\1\227\1\230\1\33\1\231\1\33"+
    "\1\232\2\33\1\233\13\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\1\234\2\33\1\235\5\33\1\236"+
    "\2\33\1\237\1\33\1\240\11\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\1\241\2\33\1\242\3\33"+
    "\1\243\1\33\1\244\16\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\1\245\2\33\1\246\1\247\1\250"+
    "\1\33\1\251\1\33\1\252\2\33\1\253\13\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\32\0\1\254\40\0"+
    "\30\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\3\33\1\255\24\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\36\0\2\36\1\0\1\256\67\0\1\257\31\0"+
    "\43\42\1\260\1\261\24\42\44\0\1\43\23\0\1\43"+
    "\46\0\1\262\73\0\1\263\70\0\1\264\70\0\1\265"+
    "\70\0\1\266\73\0\1\267\74\0\1\270\72\0\1\271"+
    "\72\0\1\272\72\0\1\273\3\0\2\33\1\274\25\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\2\33"+
    "\1\275\5\33\1\276\17\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\4\33\1\277\1\33\1\300\21\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\6\33"+
    "\1\301\21\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\6\33\1\302\21\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\13\33\1\303\1\33\1\304\12\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\1\305"+
    "\12\33\1\306\14\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\307\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\21\33\1\310\6\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\10\33\1\311"+
    "\17\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\312\21\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\4\33\1\313\23\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\314\12\33\1\315"+
    "\6\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\316\21\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\3\33\1\317\3\33\1\320\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\20\33\1\321"+
    "\7\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\26\33\1\322\1\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\1\33\1\323\24\33\1\324\1\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\325\27\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\2\33"+
    "\1\326\1\33\1\327\1\33\1\330\1\33\1\331\15\33"+
    "\1\332\1\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\14\33\1\333\1\33\1\334\11\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\17\33\1\335\10\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\2\33"+
    "\1\336\25\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\5\33\1\337\22\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\1\340\27\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\1\341\27\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\4\33\1\342\23\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\6\33"+
    "\1\343\21\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\6\33\1\344\21\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\4\33\1\345\23\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\13\33\1\346\14\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\7\33"+
    "\1\347\20\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\6\33\1\350\1\351\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\27\33\1\352\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\2\33\1\353\7\33"+
    "\1\354\15\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\1\355\7\33\1\356\13\33\1\357\3\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\360\17\33"+
    "\1\361\6\33\1\362\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\12\33\1\363\7\33\1\364\5\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\365\6\33"+
    "\1\366\1\33\1\367\16\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\11\33\1\370\10\33\1\371\1\372"+
    "\4\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\13\33\1\373\7\33\1\374\4\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\1\33\1\375\26\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\376"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\23\33\1\377\4\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\26\33\1\u0100\1\33\1\0\1\u0101\4\33"+
    "\2\0\1\33\25\0\1\33\2\0\26\33\1\u0102\1\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\1\u0103"+
    "\4\33\1\u0104\3\33\1\u0105\3\33\1\u0106\12\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u0107"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\10\33\1\u0108\17\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\2\33\1\u0109\25\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\13\33\1\u010a\14\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u010b"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\u010c\1\u010d\1\u010e\1\u010f\16\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\2\33\1\u0110\3\33"+
    "\1\u0111\21\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\1\u0112\3\33\1\u0113\1\u0114\4\33\1\u0115\1\33"+
    "\1\u0116\11\33\1\u0117\1\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\3\33\1\u0118\1\33\1\u0119\22\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\14\33"+
    "\1\u011a\13\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\3\33\1\u011b\3\33\1\u011c\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\u011d\6\33\1\u011e"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\3\33\1\u011f\24\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\2\33\1\u0120\3\33\1\u0121\1\33\1\u0122"+
    "\1\u0123\1\u0124\1\u0125\7\33\1\u0126\4\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u0127\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\26\33"+
    "\1\u0128\1\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\6\33\1\u0129\17\33\1\u012a\1\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\6\33\1\u012b\1\33"+
    "\1\u012c\1\33\1\u012d\15\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\4\33\1\u012e\21\33\1\u012f\1\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\30\33"+
    "\1\0\1\u0130\4\33\2\0\1\33\25\0\1\33\2\0"+
    "\16\33\1\u0131\11\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u0132\6\33\1\u0133\12\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\10\33\1\u0134"+
    "\17\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\5\33\1\u0135\20\33\1\u0136\1\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\26\33\1\u0137\1\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\u0138\1\33"+
    "\1\u0139\1\33\1\u013a\3\33\1\u013b\1\33\1\u013c\14\33"+
    "\1\u013d\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\u013e\1\33\1\u013f\25\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\3\33\1\u0140\24\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\11\33\1\u0141\16\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\4\33"+
    "\1\u0142\17\33\1\u0143\3\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\4\33\1\u0144\23\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\u0145\1\33\1\u0146"+
    "\1\33\1\u0147\1\33\1\u0148\1\33\1\u0149\7\33\1\u014a"+
    "\2\33\1\u014b\3\33\1\u014c\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\21\33\1\u014d\6\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\u014e\27\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\20\33\1\u014f"+
    "\7\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\4\33\1\u0150\1\u0151\22\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\12\33\1\u0152\15\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\4\33\1\u0153\7\33"+
    "\1\u0154\13\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u0155\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\6\33\1\u0156\21\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\3\33\1\u0157\24\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\6\33"+
    "\1\u0158\21\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\1\u0159\2\33\1\u015a\24\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\15\33\1\u015b\12\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\4\33\1\u015c"+
    "\23\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\2\33\1\u015d\10\33\1\u015e\1\u015f\13\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\2\33\1\u0160\25\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\1\u0161"+
    "\27\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\33\1\u0162\26\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\14\33\1\u0163\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\20\33\1\u0164\7\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\3\33\1\u0165"+
    "\3\33\1\u0166\1\33\1\u0167\16\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\11\33\1\u0168\16\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u0169"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\u016a\21\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\11\33\1\u016b\16\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u016c\1\33\1\u016d"+
    "\16\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\u016e\21\33\1\0\1\u016f\4\33\2\0\1\33"+
    "\25\0\1\33\2\0\12\33\1\u0170\1\u0171\14\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u0172"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u0173\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\4\33\1\u0174\23\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\5\33\1\u0175\6\33\1\u0176"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\3\33\1\u0177\24\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\4\33\1\u0178\5\33\1\u0179\15\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u017a"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\4\33\1\u017b\7\33\1\u017c\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\3\33\1\u017d\3\33\1\u017e"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\1\0"+
    "\44\254\1\0\24\254\1\0\11\33\1\u017f\16\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\11\0\1\u0180\24\0"+
    "\2\256\2\0\1\u0180\27\0\46\u0181\1\u0182\22\u0181\1\0"+
    "\3\33\1\u0183\24\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u0184\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\3\33\1\u0185\24\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u0186"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\16\33\1\u0187\11\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\11\33\1\u0188\16\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\22\33\1\u0189\5\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\16\33\1\u018a"+
    "\11\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\22\33\1\u018b\5\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\24\33\1\u018c\3\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\11\33\1\u018d\16\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\25\33\1\u018e"+
    "\2\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\24\33\1\u018f\3\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\1\u0190\27\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u0191\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u0192\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\2\33"+
    "\1\u0193\25\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\6\33\1\u0194\21\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\2\33\1\u0195\25\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u0196\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\5\33"+
    "\1\u0197\22\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\3\33\1\u0198\1\33\1\u0199\1\u019a\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\u019b\27\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\3\33"+
    "\1\u019c\24\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u019d\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u019e\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\6\33\1\u019f\21\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\6\33"+
    "\1\u01a0\21\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\10\33\1\u01a1\17\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\4\33\1\u01a2\23\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\2\33\1\u01a3\4\33"+
    "\1\u01a4\1\u01a5\13\33\1\u01a6\3\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u01a7\13\33\1\u01a8"+
    "\4\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\7\33\1\u01a9\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\15\33\1\u01aa\12\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u01ab\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u01ac"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\11\33\1\u01ad\16\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\12\33\1\u01ae\15\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\2\33\1\u01af\25\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u01b0"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\21\33\1\u01b1\6\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\13\33\1\u01b2\14\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\1\u01b3\27\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u01b4\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\13\33"+
    "\1\u01b5\14\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u01b6\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\6\33\1\u01b7\21\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u01b8\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\7\33"+
    "\1\u01b9\20\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\21\33\1\u01ba\6\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\14\33\1\u01bb\13\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\12\33\1\u01bc\15\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\3\33"+
    "\1\u01bd\24\33\1\0\2\33\1\u01be\2\33\2\0\1\33"+
    "\25\0\1\33\2\0\12\33\1\u01bf\15\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\11\33\1\u01c0\16\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\1\u01c1"+
    "\27\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\7\33\1\u01c2\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\4\33\1\u01c3\23\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\30\33\1\0\2\33\1\u01c4"+
    "\2\33\2\0\1\33\25\0\1\33\2\0\23\33\1\u01c5"+
    "\4\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\u01c6\21\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u01c7\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\11\33\1\u01c8\1\u01c9\15\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\7\33"+
    "\1\u01ca\2\33\1\u01cb\15\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\21\33\1\u01cc\4\33\1\u01cd\1\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\25\33"+
    "\1\u01ce\2\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\12\33\1\u01cf\15\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\1\u01d0\27\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u01d1\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\30\33\1\u01d2"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\4\33\1\u01d3"+
    "\23\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\7\33\1\u01d4\4\33\1\u01d5\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\10\33\1\u01d6\17\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u01d7"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\2\33\1\u01d8\3\33\1\u01d9\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u01da\1\u01db\1\u01dc"+
    "\17\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\u01dd\27\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\4\33\1\u01de\23\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\4\33\1\u01df\1\u01e0\22\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u01e1"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\2\33\1\u01e2\3\33\1\u01e3\3\33\1\u01e4\5\33\1\u01e5"+
    "\7\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u01e6\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\23\33\1\u01e7\2\33\1\u01e8\1\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\2\33\1\u01e9"+
    "\25\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\2\33\1\u01ea\25\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\2\33\1\u01eb\11\33\1\u01ec\13\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\2\33\1\u01ed"+
    "\25\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\u01ee\27\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\14\33\1\u01ef\13\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\10\33\1\u01f0\17\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\4\33\1\u01f1\23\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\7\33"+
    "\1\u01f2\20\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\3\33\1\u01f3\3\33\1\u01f4\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\4\33\1\u01f5\23\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\6\33"+
    "\1\u01f6\21\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u01f7\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u01f8\1\33\1\u01f9\16\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\5\33"+
    "\1\u01fa\22\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\12\33\1\u01fb\15\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u01fc\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\5\33\1\u01fd\3\33"+
    "\1\u01fe\16\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u01ff\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\16\33\1\u0200\11\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u0201\1\u0202"+
    "\17\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\4\33\1\u0203\23\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u0204\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u0205\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\u0206\27\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\1\u0207"+
    "\6\33\1\u0208\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\10\33\1\u0209\17\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\1\33\1\u020a\26\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\u020b\27\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\23\33"+
    "\1\u020c\4\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\4\33\1\u020d\23\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\10\33\1\u020e\17\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u020f\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\4\33"+
    "\1\u0210\4\33\1\u0211\16\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\15\33\1\u0212\12\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\u0213\6\33\1\u0214"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\21\33\1\u0215\6\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u0216\1\33\1\u0217\11\33\1\u0218"+
    "\5\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\23\33\1\u0219\4\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\2\33\1\u021a\25\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\4\33\1\u021b\23\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\2\33\1\u021c"+
    "\5\33\1\u021d\10\33\1\u021e\6\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u021f\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\4\33\1\u0220"+
    "\6\33\1\u0221\14\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u0222\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\1\u0223\27\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\5\33\1\u0224\22\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\3\33"+
    "\1\u0225\24\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\3\33\1\u0226\3\33\1\u0227\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\4\33\1\u0228\23\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\7\33"+
    "\1\u0229\20\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\16\33\1\u022a\11\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\14\33\1\u022b\13\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\11\33\1\u022c\16\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\13\33"+
    "\1\u022d\14\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\14\33\1\u022e\13\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u022f\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\5\33\1\u0230\22\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\10\33"+
    "\1\u0231\4\33\1\u0232\12\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\24\33\1\u0233\3\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\3\33\1\u0234\24\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\1\33"+
    "\1\u0235\26\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\12\33\1\u0236\15\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\5\33\1\u0237\22\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\4\33\1\u0238\23\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\10\33"+
    "\1\u0239\17\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\6\33\1\u023a\21\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\11\33\1\u023b\16\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\12\33\1\u023c\15\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\4\33"+
    "\1\u023d\23\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\10\33\1\u023e\17\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\3\33\1\u023f\24\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\10\33\1\u0240\17\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\2\33"+
    "\1\u0241\5\33\1\u0242\12\33\1\u0243\4\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\3\33\1\u0244\6\33"+
    "\1\u0245\5\33\1\u0246\5\33\1\u0247\1\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\6\33\1\u0248\21\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\22\33"+
    "\1\u0249\5\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\16\33\1\u024a\11\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\6\33\1\u024b\21\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\12\33\1\u024c\1\33"+
    "\1\u024d\13\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\4\33\1\u024e\23\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\10\33\1\u024f\17\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\6\33\1\u0250\21\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\5\33"+
    "\1\u0251\22\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\21\33\1\u0252\6\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\5\33\1\u0253\22\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\2\33\1\u0254\25\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\12\33"+
    "\1\u0255\15\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\6\33\1\u0256\1\u0257\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\1\u0258\27\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\4\33\1\u0259\23\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\10\33"+
    "\1\u025a\17\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\10\33\1\u025b\17\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\4\33\1\u025c\2\33\1\u025d\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\2\33"+
    "\1\u025e\25\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\26\33\1\u025f\1\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u0260\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\12\33\1\u0261\15\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\32\0\1\u0262"+
    "\3\0\2\u0262\3\0\1\u0262\26\0\46\u0181\1\u0263\67\u0181"+
    "\1\u0264\1\u0182\22\u0181\1\0\4\33\1\u0265\23\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u0266"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\10\33\1\u0267\17\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\14\33\1\u0268\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\3\33\1\u0269\24\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\3\33\1\u026a"+
    "\24\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\5\33\1\u026b\22\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u026c\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\12\33\1\u026d\15\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\4\33\1\u026e"+
    "\23\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\2\33\1\u026f\25\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\22\33\1\u0270\5\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u0271\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\11\33\1\u0272"+
    "\16\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\11\33\1\u0273\16\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\10\33\1\u0274\17\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\2\33\1\u0275\25\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u0276"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u0277\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\11\33\1\u0278\16\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\12\33\1\u0279\15\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\4\33\1\u027a"+
    "\23\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\26\33\1\u027b\1\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u027c\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\13\33\1\u027d\14\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u027e"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\4\33\1\u027f\23\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u0280\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\14\33\1\u0281\13\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\u0282\2\33"+
    "\1\u0283\24\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\1\u0284\27\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\14\33\1\u0285\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\5\33\1\u0286\22\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u0287"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u0288\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\4\33\1\u0289\23\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\3\33\1\u028a\24\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\13\33\1\u028b"+
    "\1\u028c\13\33\1\0\1\u028d\1\33\1\u028e\2\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u028f\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\5\33\1\u0290"+
    "\22\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\4\33\1\u0291\23\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\14\33\1\u0292\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\11\33\1\u0293\16\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\4\33\1\u0294"+
    "\23\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u0295\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u0296\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\21\33\1\u0297\6\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u0298"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\5\33\1\u0299\22\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\3\33\1\u029a\24\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\20\33\1\u029b\7\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u029c"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u029d\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u029e\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\5\33\1\u029f\22\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\3\33\1\u02a0"+
    "\24\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\2\33\1\u02a1\25\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\2\33\1\u02a2\14\33\1\u02a3\10\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\4\33\1\u02a4"+
    "\23\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\2\33\1\u02a5\25\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\10\33\1\u02a6\17\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\21\33\1\u02a7\6\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\10\33\1\u02a8"+
    "\17\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\23\33\1\u02a9\4\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\11\0\1\u02aa\61\0\20\33\1\u02ab\7\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u02ac"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\u02ad\27\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\5\33\1\u02ae\22\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\23\33\1\u02af\4\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\6\33\1\u02b0\21\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\1\u02b1"+
    "\27\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\4\33\1\u02b2\23\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\4\33\1\u02b3\2\33\1\u02b4\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\u02b5\27\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\26\33"+
    "\1\u02b6\1\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\6\33\1\u02b7\21\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\6\33\1\u02b8\21\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\u02b9\10\33\1\u02ba"+
    "\16\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\7\33\1\u02bb\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u02bc\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u02bd\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\5\33\1\u02be"+
    "\22\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\11\33\1\u02bf\16\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u02c0\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u02c1\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\3\33\1\u02c2"+
    "\24\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\7\33\1\u02c3\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\2\33\1\u02c4\25\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u02c5\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\u02c6\24\33"+
    "\1\u02c7\2\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\22\33\1\u02c8\5\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\1\u02c9\27\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\12\33\1\u02ca\1\33\1\u02cb"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u02cc\4\33\1\u02cd\6\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\5\33\1\u02ce\22\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\11\33\1\u02cf"+
    "\16\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u02d0\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\30\33\1\0\1\u02d1\4\33\2\0\1\33"+
    "\25\0\1\33\2\0\10\33\1\u02d2\17\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\6\33\1\u02d3\21\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\6\33"+
    "\1\u02d4\21\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\13\33\1\u02d5\14\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\14\33\1\u02d6\13\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\3\33\1\u02d7\24\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\2\33"+
    "\1\u02d8\25\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u02d9\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\4\33\1\u02da\23\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\11\33\1\u02db\16\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\14\33"+
    "\1\u02dc\13\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\14\33\1\u02dd\13\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\1\33\1\u02de\26\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\4\33\1\u02df\23\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\11\33"+
    "\1\u02e0\16\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\4\33\1\u02e1\23\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\14\33\1\u02e2\13\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\6\33\1\u02e3\21\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\1\u02e4"+
    "\27\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\26\33\1\u02e5\1\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\5\33\1\u02e6\22\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\14\33\1\u02e7\13\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u02e8"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\5\33\1\u02e9\3\33\1\u02ea\16\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\3\33\1\u02eb\24\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u02ec"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\33\1\u02ed\26\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\3\33\1\u02ee\24\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\5\33\1\u02ef\22\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u02f0"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\3\33\1\u02f1\10\33\1\u02f2\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u02f3\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u02f4"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u02f5\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\22\33\1\u02f6\5\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\14\33\1\u02f7\13\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\11\33\1\u02f8"+
    "\16\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u02f9\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u02fa\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\12\33\1\u02fb\15\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\4\33\1\u02fc"+
    "\23\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\7\33\1\u02fd\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\16\33\1\u02fe\11\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\11\33\1\u02ff\16\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\u0300\27\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\6\33"+
    "\1\u0301\21\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\23\33\1\u0302\4\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\1\u0303\27\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\11\33\1\u0304\16\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u0305"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\11\33\1\u0306\16\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u0307\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u0308\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u0309"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\7\33\1\u030a\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\11\33\1\u030b\16\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\1\u030c\27\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\14\33\1\u030d\13\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\6\33"+
    "\1\u030e\21\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\11\33\1\u030f\16\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\1\u0310\27\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\27\33\1\u0311\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\11\33\1\u0312\16\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\7\33"+
    "\1\u0313\20\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u0314\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u0315\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u0316\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\16\33"+
    "\1\u0317\11\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\16\33\1\u0318\11\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\4\33\1\u0319\23\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u031a\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\6\33"+
    "\1\u031b\21\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u031c\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\13\33\1\u031d\14\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\14\33\1\u031e\13\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\11\33"+
    "\1\u031f\16\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\6\33\1\u0320\21\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\6\33\1\u0321\21\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\16\33\1\u0322\11\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\27\33"+
    "\1\u0323\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\u0324\21\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u0325\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\36\0\2\u0262\32\0\45\u0181\1\u0326"+
    "\1\u0263\22\u0181\1\0\5\33\1\u0327\22\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\6\33\1\u0328\21\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\1\u0329"+
    "\27\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u032a\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\12\33\1\u032b\15\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\23\33\1\u032c\4\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u032d"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\7\33\1\u032e\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u032f\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\14\33\1\u0330\13\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\2\33\1\u0331"+
    "\25\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\3\33\1\u0332\24\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u0333\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u0334\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\13\33\1\u0335"+
    "\14\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\11\33\1\u0336\16\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\3\33\1\u0337\24\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u0338\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\4\33\1\u0339"+
    "\23\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\u033a\27\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\26\33\1\u033b\1\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\3\33\1\u033c\24\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\11\33\1\u033d\16\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\1\u033e"+
    "\27\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u033f\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\13\33\1\u0340\14\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\14\33\1\u0341\13\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u0342"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\25\33\1\u0343\2\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\1\u0344\27\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\12\33\1\u0345\15\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\u0346\27\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\3\33\1\u0347"+
    "\24\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\26\33\1\u0348\1\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\5\33\1\u0349\22\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\2\33\1\u034a\25\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\u034b\27\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\12\33"+
    "\1\u034c\15\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\3\33\1\u034d\24\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u034e\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\24\33\1\u034f\3\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\3\33"+
    "\1\u0350\24\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u0351\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\2\33\1\u0352\25\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\u0353\27\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u0354"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\11\33\1\u0355\16\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u0356\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\3\33\1\u0357\24\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\11\33\1\u0358"+
    "\16\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\u0359\3\33\1\u035a\23\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\1\u035b\27\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u035c\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\3\33\1\u035d"+
    "\24\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\7\33\1\u035e\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\33\0\1\u035f\37\0\4\33\1\u0360\23\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u0361"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\10\33\1\u0362\17\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u0363\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u0364\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\2\33\1\u0365"+
    "\25\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\13\33\1\u0366\14\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\3\33\1\u0367\24\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\11\33\1\u0368\16\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\2\33\1\u0369"+
    "\25\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\u036a\21\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\12\33\1\u036b\15\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\14\33\1\u036c\13\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\11\33\1\u036d"+
    "\16\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u036e\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\10\33\1\u036f\17\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\14\33\1\u0370\13\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\2\33\1\u0371"+
    "\25\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\u0372\21\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u0373\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u0374\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u0375"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u0376\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u0377\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\10\33\1\u0378\17\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\4\33\1\u0379"+
    "\23\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\23\33\1\u037a\4\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u037b\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\2\33\1\u037c\25\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u037d"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\2\33\1\u037e\15\33\1\u037f\7\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u0380\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\13\33\1\u0381"+
    "\14\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\u0382\27\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\1\u0383\27\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\11\33\1\u0384\16\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\11\33\1\u0385\16\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\u0386\27\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\12\33"+
    "\1\u0387\15\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\10\33\1\u0388\17\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\5\33\1\u0389\22\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\27\33\1\u038a\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\11\33\1\u038b"+
    "\16\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\u038c\27\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u038d\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\12\33\1\u038e\15\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\3\33\1\u038f\24\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\11\33"+
    "\1\u0390\16\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u0391\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\14\33\1\u0392\13\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\u0393\27\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\4\33\1\u0394"+
    "\23\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u0395\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\3\33\1\u0396\24\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\14\33\1\u0397\13\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u0398"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u0399\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\14\33\1\u039a\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\1\u039b\27\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\5\33\1\u039c\22\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\11\33"+
    "\1\u039d\16\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u039e\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\14\33\1\u039f\13\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\11\33\1\u03a0\16\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\11\33"+
    "\1\u03a1\16\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\12\33\1\u03a2\15\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\27\33\1\u03a3\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u03a4\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u03a5"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\10\33\1\u03a6\17\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u03a7\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\21\33\1\u03a8\6\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\3\33\1\u03a9"+
    "\24\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\2\33\1\u03aa\25\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\1\u03ab\27\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\12\33\1\u03ac\15\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\4\33\1\u03ad\23\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\4\33"+
    "\1\u03ae\23\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\1\u03af\27\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\11\33\1\u03b0\16\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\10\33\1\u03b1\17\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u03b2"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\13\33\1\u03b3\14\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\14\33\1\u03b4\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\2\33\1\u03b5\25\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u03b6"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\4\33\1\u03b7\23\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\14\33\1\u03b8\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\3\33\1\u03b9\24\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u03ba"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\u03bb\21\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\20\33\1\u03bc\7\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u03bd\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u03be"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\u03bf\27\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\21\33\1\u03c0\6\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\11\33\1\u03c1\16\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\u03c2\27\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u03c3"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\u03c4\21\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\11\33\1\u03c5\16\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u03c6\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\11\33\1\u03c7"+
    "\16\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u03c8\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\12\33\1\u03c9\15\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\11\33\1\u03ca\16\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u03cb"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u03cc\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\14\33\1\u03cd\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u03ce\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u03cf"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\11\33\1\u03d0\16\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\25\33\1\u03d1\2\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\24\33\1\u03d2\3\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u03d3"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\u03d4\21\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\3\33\1\u03d5\24\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u03d6\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u03d7"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\4\33\1\u03d8\23\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\23\33\1\u03d9\4\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u03da\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\24\33\1\u03db"+
    "\3\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\4\33\1\u03dc\23\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u03dd\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\21\33\1\u03de\6\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\21\33\1\u03df"+
    "\6\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u03e0\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u03e1\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u03e2\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\u03e3\27\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\4\33"+
    "\1\u03e4\23\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\1\u03e5\27\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\17\33\1\u03e6\10\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\1\u03e7\27\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\12\33\1\u03e8\15\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\12\33"+
    "\1\u03e9\15\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\10\33\1\u03ea\17\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\1\u03eb\27\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u03ec\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u03ed"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u03ee\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\11\0\1\u03ef\61\0\1\u03f0\27\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\6\33\1\u03f1\21\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\7\33"+
    "\1\u03f2\20\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\11\33\1\u03f3\16\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u03f4\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\21\33\1\u03f5\6\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\6\33"+
    "\1\u03f6\21\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\10\33\1\u03f7\17\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u03f8\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\u03f9\27\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u03fa"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\5\33\1\u03fb\22\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u03fc\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u03fd\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\23\33\1\u03fe"+
    "\4\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\7\33\1\u03ff\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\14\33\1\u0400\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u0401\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u0402"+
    "\7\33\1\u0403\11\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u0404\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\3\33\1\u0405\24\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\11\33\1\u0406"+
    "\16\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\11\33\1\u0407\16\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u0408\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\1\u0409\27\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\14\33\1\u040a\13\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\7\33"+
    "\1\u040b\20\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\4\33\1\u040c\23\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\6\33\1\u040d\21\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\6\33\1\u040e\21\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\1\u040f"+
    "\27\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\4\33\1\u0410\23\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\1\u0411\27\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\22\33\1\u0412\5\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\2\33\1\u0413\25\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\10\33"+
    "\1\u0414\17\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\2\33\1\u0415\25\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\10\33\1\u0416\17\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\33\1\u0417\21\33"+
    "\1\u0418\4\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u0419\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\4\33\1\u041a\23\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\6\33\1\u041b\21\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\1\u041c"+
    "\6\33\1\u041d\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\2\33\1\u041e\25\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\1\33\1\u041f\26\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\10\33\1\u0420"+
    "\17\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u0421\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\14\33\1\u0422\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\10\33\1\u0423\17\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u0424"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\13\33\1\u0425\14\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\30\33\1\0\1\u0426\4\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u0427\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\10\33\1\u0428\17\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\20\33"+
    "\1\u0429\7\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\2\33\1\u042a\25\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\11\33\1\u042b\16\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\u042c\27\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u042d"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\10\33\1\u042e\17\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\14\33\1\u042f\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\21\33\1\u0430\6\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\4\33\1\u0431"+
    "\23\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\3\33\1\u0432\24\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u0433\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\5\33\1\u0434\22\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\20\33\1\u0435"+
    "\7\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\11\33\1\u0436\16\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u0437\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u0438\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\15\33\1\u0439"+
    "\12\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u043a\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\21\33\1\u043b\6\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u043c\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u043d"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u043e\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\12\33\1\u043f\15\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\3\33\1\u0440\24\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\10\33\1\u0441"+
    "\17\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\30\33\1\0\1\u0442\4\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u0443\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\3\33\1\u0444\24\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u0445\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\17\33"+
    "\1\u0446\10\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\21\33\1\u0447\6\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\12\33\1\u0448\15\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\11\33\1\u0449\16\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\25\33"+
    "\1\u044a\2\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\15\33\1\u044b\12\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\10\33\1\u044c\17\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\5\33\1\u044d\22\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\12\33"+
    "\1\u044e\15\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\6\33\1\u044f\21\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u0450\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\14\33\1\u0451\13\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\11\33"+
    "\1\u0452\16\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u0453\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\2\33\1\u0454\25\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\u0455\27\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\2\33\1\u0456"+
    "\25\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u0457\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u0458\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u0459\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\26\33\1\u045a"+
    "\1\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u045b\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u045c\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\26\33\1\u045d\1\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u045e"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\21\33\1\u045f\6\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u0460\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u0461\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u0462"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\20\33\1\u0463\7\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\12\0\1\u0464\60\0\4\33\1\u0465\23\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\3\33\1\u0466"+
    "\24\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\13\33\1\u0467\14\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\11\33\1\u0468\16\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u0469\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\11\33\1\u046a"+
    "\16\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\2\33\1\u046b\25\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u046c\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\11\33\1\u046d\16\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\3\33\1\u046e"+
    "\24\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\7\33\1\u046f\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\25\33\1\u0470\2\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u0471\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u0472"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u0473\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\11\33\1\u0474\16\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\3\33\1\u0475\24\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u0476"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\10\33\1\u0477\17\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\4\33\1\u0478\23\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\4\33\1\u0479\23\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\3\33\1\u047a"+
    "\24\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\15\33\1\u047b\12\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u047c\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\4\33\1\u047d\23\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u047e"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\7\33\1\u047f\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\1\u0480\27\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u0481\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\6\33\1\u0482\21\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\1\33"+
    "\1\u0483\26\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\13\33\1\u0484\14\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\6\33\1\u0485\21\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u0486\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\6\33"+
    "\1\u0487\21\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u0488\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\3\33\1\u0489\24\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\22\33\1\u048a\5\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\6\33"+
    "\1\u048b\21\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\10\33\1\u048c\17\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\6\33\1\u048d\21\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\6\33\1\u048e\21\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\7\33"+
    "\1\u048f\20\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\21\33\1\u0490\6\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\6\33\1\u0491\21\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\10\33\1\u0492\17\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\22\33"+
    "\1\u0493\5\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\12\33\1\u0494\15\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\14\33\1\u0495\13\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u0496\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\3\33"+
    "\1\u0497\24\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\21\33\1\u0498\6\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\14\33\1\u0499\13\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\30\33\1\0\1\u049a"+
    "\4\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u049b"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u049c\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u049d\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u049e\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u049f"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\u04a0\27\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\6\33\1\u04a1\21\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\21\33\1\u04a2\6\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\10\33\1\u04a3\17\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\5\33"+
    "\1\u04a4\22\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\1\u04a5\27\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\2\33\1\u04a6\17\33\1\u04a7\5\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\2\33\1\u04a8"+
    "\25\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u04a9\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\12\33\1\u04aa\15\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\2\33\1\u04ab\25\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u04ac"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\15\33\1\u04ad\12\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\30\33\1\0\1\u04ae\4\33\2\0\1\33"+
    "\25\0\1\33\2\0\23\33\1\u04af\4\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\15\33\1\u04b0\12\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\23\33"+
    "\1\u04b1\4\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\25\33\1\u04b2\2\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\11\33\1\u04b3\16\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u04b4\1\33"+
    "\1\u04b5\16\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u04b6\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\12\33\1\u04b7\15\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\3\33\1\u04b8\24\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\12\33"+
    "\1\u04b9\15\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\6\33\1\u04ba\21\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\3\33\1\u04bb\24\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\12\33\1\u04bc\15\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\13\33"+
    "\1\u04bd\14\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\5\33\1\u04be\1\u04bf\4\33\1\u04c0\14\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u04c1"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\7\33\1\u04c2\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\21\33\1\u04c3\6\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\12\33\1\u04c4\15\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\12\33\1\u04c5"+
    "\15\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\11\33\1\u04c6\16\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u04c7\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\15\33\1\u04c8\12\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u04c9"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\10\33\1\u04ca\14\33\1\u04cb\2\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u04cc\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u04cd"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\u04ce\21\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\3\33\1\u04cf\24\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\4\33\1\u04d0\23\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\11\33\1\u04d1"+
    "\16\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\13\33\1\u04d2\14\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\10\33\1\u04d3\17\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\14\33\1\u04d4\13\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\3\33\1\u04d5"+
    "\24\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\5\33\1\u04d6\22\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\11\33\1\u04d7\16\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u04d8\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u04d9"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\12\33\1\u04da\15\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u04db\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\3\33\1\u04dc\24\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u04dd"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\3\33\1\u04de\24\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u04df\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u04e0\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\16\33\1\u04e1"+
    "\11\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\2\33\1\u04e2\25\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\2\33\1\u04e3\25\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\5\33\1\u04e4\22\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\11\33\1\u04e5"+
    "\16\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\7\33\1\u04e6\20\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u04e7\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\21\33\1\u04e8\6\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\21\33\1\u04e9"+
    "\6\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\3\33\1\u04ea\24\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u04eb\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u04ec\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\4\33\1\u04ed"+
    "\23\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\16\33\1\u04ee\7\33\1\u04ef\1\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\3\33\1\u04f0\24\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\3\33\1\u04f1"+
    "\24\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u04f2\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\12\33\1\u04f3\15\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u04f4\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\u04f5\27\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\12\33"+
    "\1\u04f6\15\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\13\33\1\u04f7\14\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\2\33\1\u04f8\25\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\11\33\1\u04f9\16\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\1\u04fa"+
    "\27\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u04fb\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u04fc\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u04fd\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\20\33\1\u04fe"+
    "\7\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\3\33\1\u04ff\24\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\11\33\1\u0500\16\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\14\33\1\u0501\13\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u0502"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u0503\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u0504\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\10\33\1\u0505\17\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u0506"+
    "\21\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\4\33\1\u0507\23\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\14\33\1\u0508\13\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\3\33\1\u0509\24\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\2\33\1\u050a"+
    "\25\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\2\33\1\u050b\25\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\5\33\1\u050c\22\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\14\33\1\u050d\13\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\u050e\27\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\11\33"+
    "\1\u050f\16\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u0510\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\13\33\1\u0511\14\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\26\33\1\u0512\1\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\15\33"+
    "\1\u0513\12\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\14\33\1\u0514\13\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\6\33\1\u0515\21\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\5\33\1\u0516\22\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\7\33"+
    "\1\u0517\20\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\3\33\1\u0518\24\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\11\33\1\u0519\16\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\12\33\1\u051a\15\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\12\33"+
    "\1\u051b\15\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\6\33\1\u051c\21\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\2\33\1\u051d\25\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\33\1\u051e\26\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\11\33"+
    "\1\u051f\16\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u0520\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\26\33\1\u0521\1\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\6\33\1\u0522\21\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\25\33"+
    "\1\u0523\2\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\16\33\1\u0524\11\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u0525\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\4\33\1\u0526\23\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\12\33"+
    "\1\u0527\15\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u0528\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\2\33\1\u0529\25\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u052a\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\12\33"+
    "\1\u052b\15\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\23\33\1\u052c\4\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\1\33\1\u052d\26\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\3\33\1\u052e\24\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\14\33"+
    "\1\u052f\13\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\11\33\1\u0530\16\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\11\33\1\u0531\16\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\23\33\1\u0532\4\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\16\33"+
    "\1\u0533\11\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\14\33\1\u0534\13\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\5\33\1\u0535\22\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\12\33\1\u0536\15\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\4\33"+
    "\1\u0537\23\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\12\33\1\u0538\15\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\14\33\1\u0539\13\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u053a\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\7\33"+
    "\1\u053b\20\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\4\33\1\u053c\23\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\2\33\1\u053d\25\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\13\33\1\u053e\14\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\4\33"+
    "\1\u053f\23\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\12\33\1\u0540\15\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\6\33\1\u0541\21\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\4\33\1\u0542\23\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\16\33"+
    "\1\u0543\11\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\10\33\1\u0544\17\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\14\33\1\u0545\13\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\5\33\1\u0546\22\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\7\33"+
    "\1\u0547\20\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\21\33\1\u0548\6\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\2\33\1\u0549\25\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\7\33\1\u054a\20\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\7\33"+
    "\1\u054b\20\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u054c\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\1\u054d\27\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\14\33\1\u054e\13\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\7\33\1\u054f"+
    "\20\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\u0550\21\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u0551\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\12\33\1\u0552\15\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\14\33\1\u0553"+
    "\13\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\14\33\1\u0554\13\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\1\u0555\27\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u0556\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\u0557\27\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\21\33\1\u0558"+
    "\6\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\u0559\21\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\11\33\1\u055a\16\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\2\33\1\u055b\25\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\26\33\1\u055c"+
    "\1\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\6\33\1\u055d\21\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u055e\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u055f\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\23\33\1\u0560"+
    "\4\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\16\33\1\u0561\11\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\15\33\1\u0562\12\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\6\33\1\u0563\21\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\6\33\1\u0564"+
    "\4\33\1\u0565\14\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\1\u0566\27\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\1\u0567\27\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\7\33\1\u0568\20\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\33\1\u0569"+
    "\26\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\33\1\u056a\26\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\6\33\1\u056b\21\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\2\0\4\33\1\u056c\23\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\4\33\1\u056d"+
    "\23\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\1\u056e\27\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\7\33\1\u056f\20\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\7\33\1\u0570\20\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\11\33\1\u0571\16\33"+
    "\1\0\5\33\2\0\1\33\25\0\1\33\2\0\4\33"+
    "\1\u0572\23\33\1\0\5\33\2\0\1\33\25\0\1\33"+
    "\2\0\2\33\1\u0573\25\33\1\0\5\33\2\0\1\33"+
    "\25\0\1\33\2\0\6\33\1\u0574\21\33\1\0\5\33"+
    "\2\0\1\33\25\0\1\33\2\0\1\u0575\27\33\1\0"+
    "\5\33\2\0\1\33\25\0\1\33\2\0\1\33\1\u0576"+
    "\26\33\1\0\5\33\2\0\1\33\25\0\1\33\2\0"+
    "\4\33\1\u0577\23\33\1\0\5\33\2\0\1\33\25\0"+
    "\1\33\2\0\7\33\1\u0578\20\33\1\0\5\33\2\0"+
    "\1\33\25\0\1\33\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[63270];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\35\1\2\11\3\1\2\11\5\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\172\1\3\11"+
    "\1\0\11\11\305\1\2\0\117\1\1\0\220\1\1\0"+
    "\106\1\1\0\173\1\1\11\70\1\1\0\217\1\1\0"+
    "\164\1\1\11\u0114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1400];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }
	public int noToken = 0;	

	/*
    public void nextToken() {

	}
    */


	public void Advertencia(int col, int fil) {
			System.out.println("---- Advertencia: identificador en la linea " + fil + " columna " + col + " excede la longitud permitida, sera truncado. ----");
	;}

	public void ErrorLexico(String token) {
			if(token.equals('\'')){

			}
	;}

	//public ArrayList<MyTOKEN> TOKENS = new ArrayList<MyTOKEN>();

	





  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	
	//AnalizadorSintactico anal = new AnalizadorSintactico(TOKENS);
	//anal.Analizar();
	/*if(anal.errores == 0){
		System.out.println("¡El archivo a sido analizado con exito!");
	}*/
	//AnalizadorSintactico(TOKENS);
	
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //TOKENS.add(new MyTOKEN(yytext(), "ERROR", yycolumn, yyline));
    return symbol(sym.ERROR,"ERROR");
	//ArchivoEscribir = ArchivoEscribir + "Error en la col: " + yycolumn + " fila: " + yyline + " Caracter no Reconocido" + "\n";
            } 
            // fall through
          case 355: break;
          case 2: 
            { if(yylength() < 31)
	{
		//TOKENS.add(new MyTOKEN(yytext(), "Identificador", yycolumn, yyline));
        return symbol(sym.Identificador,"Identificador");
	}else{
		Advertencia(yyline, yycolumn);
		//TOKENS.add(new MyTOKEN(yytext(), "Identificador", yycolumn, yyline)) ;
        return symbol(sym.Identificador,"Identificador");
	}
            } 
            // fall through
          case 356: break;
          case 3: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Boolean", yycolumn, yyline));
    return symbol(sym.Boolean,"Boolean");
            } 
            // fall through
          case 357: break;
          case 4: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signomenos,"Signomenos");
            } 
            // fall through
          case 358: break;
          case 5: 
            { return symbol(sym.DBit,"DBit");
            } 
            // fall through
          case 359: break;
          case 6: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Entero", yycolumn, yyline)) ;
    return symbol(sym.Entero,"Entero");
            } 
            // fall through
          case 360: break;
          case 7: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Punto,"Punto");
            } 
            // fall through
          case 361: break;
          case 8: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signomas,"Signomas");
            } 
            // fall through
          case 362: break;
          case 9: 
            { //ArchivoEscribir = ArchivoEscribir + "Error en la col: " + yycolumn + " fila: " + yyline + " Cadena sin cerrar"+ "\n";
	//TOKENS.add(new MyTOKEN(yytext(), "ERROR", yycolumn, yyline));
    return symbol(sym.ERROR,"ERROR");
            } 
            // fall through
          case 363: break;
          case 10: 
            { /*Hacer nada equisde*/
            } 
            // fall through
          case 364: break;
          case 11: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signodiv,"Signodiv");
            } 
            // fall through
          case 365: break;
          case 12: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signomult,"Signomult");
            } 
            // fall through
          case 366: break;
          case 13: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signoporcentaje,"Signoporcentaje");
            } 
            // fall through
          case 367: break;
          case 14: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signomayor,"Signomayor");
            } 
            // fall through
          case 368: break;
          case 15: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signoigual,"Signoigual");
            } 
            // fall through
          case 369: break;
          case 16: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signomenor,"Signomenor");
            } 
            // fall through
          case 370: break;
          case 17: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signoadmiracion,"Signoadmiracion");
            } 
            // fall through
          case 371: break;
          case 18: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Puntoycoma,"Puntoycoma");
            } 
            // fall through
          case 372: break;
          case 19: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Coma,"Coma");
            } 
            // fall through
          case 373: break;
          case 20: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Corcheteapertura,"Corcheteapertura");
            } 
            // fall through
          case 374: break;
          case 21: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Corchetecerradura,"Corchetecerradura");
            } 
            // fall through
          case 375: break;
          case 22: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Parentesisapertura,"Parentesisapertura");
            } 
            // fall through
          case 376: break;
          case 23: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Parentesiscerradura,"Parentesiscerradura");
            } 
            // fall through
          case 377: break;
          case 24: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Llaveapertura,"Llaveapertura");
            } 
            // fall through
          case 378: break;
          case 25: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Llavecerradura,"Llavecerradura");
            } 
            // fall through
          case 379: break;
          case 26: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Arroba,"Arroba");
            } 
            // fall through
          case 380: break;
          case 27: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Sharp,"Sharp");
            } 
            // fall through
          case 381: break;
          case 28: 
            { return symbol(sym.AS,"AS");
            } 
            // fall through
          case 382: break;
          case 29: 
            { return symbol(sym.AT,"AT");
            } 
            // fall through
          case 383: break;
          case 30: 
            { return symbol(sym.BY,"BY");
            } 
            // fall through
          case 384: break;
          case 31: 
            { return symbol(sym.ON,"ON");
            } 
            // fall through
          case 385: break;
          case 32: 
            { return symbol(sym.OR,"OR");
            } 
            // fall through
          case 386: break;
          case 33: 
            { return symbol(sym.OF,"OF");
            } 
            // fall through
          case 387: break;
          case 34: 
            { return symbol(sym.TO,"TO");
            } 
            // fall through
          case 388: break;
          case 35: 
            { return symbol(sym.IS,"IS");
            } 
            // fall through
          case 389: break;
          case 36: 
            { return symbol(sym.IN,"IN");
            } 
            // fall through
          case 390: break;
          case 37: 
            { return symbol(sym.IF,"IF");
            } 
            // fall through
          case 391: break;
          case 38: 
            { return symbol(sym.NO,"NO");
            } 
            // fall through
          case 392: break;
          case 39: 
            { return symbol(sym.GO,"GO");
            } 
            // fall through
          case 393: break;
          case 40: 
            { ////TOKENS.add(new MyTOKEN(yytext(), "Comentario.Linea", yycolumn, yyline));
    //return symbol(sym.ComentarioLinea,"ComentarioLinea");
            } 
            // fall through
          case 394: break;
          case 41: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Float", yycolumn, yyline));
    return symbol(sym.Float,"Float");
            } 
            // fall through
          case 395: break;
          case 42: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signoor,"Signoor");
            } 
            // fall through
          case 396: break;
          case 43: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Cadena", yycolumn, yyline));
    return symbol(sym.Cadena,"Cadena");
            } 
            // fall through
          case 397: break;
          case 44: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signomayorigual,"Signomayorigual");
            } 
            // fall through
          case 398: break;
          case 45: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signoigualigual,"Signoigualigual");
            } 
            // fall through
          case 399: break;
          case 46: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signomenorigual,"Signomenorigual");
            } 
            // fall through
          case 400: break;
          case 47: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signonotigual,"Signonotigual");
            } 
            // fall through
          case 401: break;
          case 48: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Operador", yycolumn, yyline));
    return symbol(sym.Signoyy,"Signoyy");
            } 
            // fall through
          case 402: break;
          case 49: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Corchetes,"Corchetes");
            } 
            // fall through
          case 403: break;
          case 50: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Parentesis,"Parentesis");
            } 
            // fall through
          case 404: break;
          case 51: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Llaves,"Llaves");
            } 
            // fall through
          case 405: break;
          case 52: 
            { //TOKENS.add(new MyTOKEN(yytext(), "Simbolo", yycolumn, yyline));
    return symbol(sym.Sharpsharp,"Sharpsharp");
            } 
            // fall through
          case 406: break;
          case 53: 
            { return symbol(sym.ASC,"ASC");
            } 
            // fall through
          case 407: break;
          case 54: 
            { return symbol(sym.ALL,"ALL");
            } 
            // fall through
          case 408: break;
          case 55: 
            { return symbol(sym.AND,"AND");
            } 
            // fall through
          case 409: break;
          case 56: 
            { return symbol(sym.ANY,"ANY");
            } 
            // fall through
          case 410: break;
          case 57: 
            { return symbol(sym.ADA,"ADA");
            } 
            // fall through
          case 411: break;
          case 58: 
            { return symbol(sym.ADD,"ADD");
            } 
            // fall through
          case 412: break;
          case 59: 
            { return symbol(sym.ARE,"ARE");
            } 
            // fall through
          case 413: break;
          case 60: 
            { return symbol(sym.AVG,"AVG");
            } 
            // fall through
          case 414: break;
          case 61: 
            { return symbol(sym.BIT,"BIT");
            } 
            // fall through
          case 415: break;
          case 62: 
            { return symbol(sym.SUM,"SUM");
            } 
            // fall through
          case 416: break;
          case 63: 
            { return symbol(sym.SET,"SET");
            } 
            // fall through
          case 417: break;
          case 64: 
            { return symbol(sym.SQL,"SQL");
            } 
            // fall through
          case 418: break;
          case 65: 
            { return symbol(sym.OFF,"OFF");
            } 
            // fall through
          case 419: break;
          case 66: 
            { return symbol(sym.USE,"USE");
            } 
            // fall through
          case 420: break;
          case 67: 
            { return symbol(sym.TOP,"TOP");
            } 
            // fall through
          case 421: break;
          case 68: 
            { return symbol(sym.END,"END");
            } 
            // fall through
          case 422: break;
          case 69: 
            { return symbol(sym.INT,"INT");
            } 
            // fall through
          case 423: break;
          case 70: 
            { return symbol(sym.NOT,"NOT");
            } 
            // fall through
          case 424: break;
          case 71: 
            { return symbol(sym.DAY,"DAY");
            } 
            // fall through
          case 425: break;
          case 72: 
            { return symbol(sym.DEC,"DEC");
            } 
            // fall through
          case 426: break;
          case 73: 
            { return symbol(sym.GET,"GET");
            } 
            // fall through
          case 427: break;
          case 74: 
            { return symbol(sym.KEY,"KEY");
            } 
            // fall through
          case 428: break;
          case 75: 
            { return symbol(sym.PAD,"PAD");
            } 
            // fall through
          case 429: break;
          case 76: 
            { return symbol(sym.MAX,"MAX");
            } 
            // fall through
          case 430: break;
          case 77: 
            { return symbol(sym.MIN,"MIN");
            } 
            // fall through
          case 431: break;
          case 78: 
            { return symbol(sym.FOR,"FOR");
            } 
            // fall through
          case 432: break;
          case 79: 
            { return symbol(sym.BOTH,"BOTH");
            } 
            // fall through
          case 433: break;
          case 80: 
            { return symbol(sym.BULK,"BULK");
            } 
            // fall through
          case 434: break;
          case 81: 
            { return symbol(sym.SAVE,"SAVE");
            } 
            // fall through
          case 435: break;
          case 82: 
            { return symbol(sym.SOME,"SOME");
            } 
            // fall through
          case 436: break;
          case 83: 
            { return symbol(sym.SIZE,"SIZE");
            } 
            // fall through
          case 437: break;
          case 84: 
            { return symbol(sym.ONLY,"ONLY");
            } 
            // fall through
          case 438: break;
          case 85: 
            { return symbol(sym.OVER,"OVER");
            } 
            // fall through
          case 439: break;
          case 86: 
            { return symbol(sym.OPEN,"OPEN");
            } 
            // fall through
          case 440: break;
          case 87: 
            { return symbol(sym.LAST,"LAST");
            } 
            // fall through
          case 441: break;
          case 88: 
            { return symbol(sym.LOAD,"LOAD");
            } 
            // fall through
          case 442: break;
          case 89: 
            { return symbol(sym.LEFT,"LEFT");
            } 
            // fall through
          case 443: break;
          case 90: 
            { return symbol(sym.LIKE,"LIKE");
            } 
            // fall through
          case 444: break;
          case 91: 
            { return symbol(sym.USER,"USER");
            } 
            // fall through
          case 445: break;
          case 92: 
            { return symbol(sym.TIME,"TIME");
            } 
            // fall through
          case 446: break;
          case 93: 
            { return symbol(sym.TRAN,"TRAN");
            } 
            // fall through
          case 447: break;
          case 94: 
            { return symbol(sym.TRUE,"TRUE");
            } 
            // fall through
          case 448: break;
          case 95: 
            { return symbol(sym.TRIM,"TRIM");
            } 
            // fall through
          case 449: break;
          case 96: 
            { return symbol(sym.THEN,"THEN");
            } 
            // fall through
          case 450: break;
          case 97: 
            { return symbol(sym.ELSE,"ELSE");
            } 
            // fall through
          case 451: break;
          case 98: 
            { return symbol(sym.EXEC,"EXEC");
            } 
            // fall through
          case 452: break;
          case 99: 
            { return symbol(sym.EXIT,"EXIT");
            } 
            // fall through
          case 453: break;
          case 100: 
            { return symbol(sym.CAST,"CAST");
            } 
            // fall through
          case 454: break;
          case 101: 
            { return symbol(sym.CASE,"CASE");
            } 
            // fall through
          case 455: break;
          case 102: 
            { return symbol(sym.CHAR,"CHAR");
            } 
            // fall through
          case 456: break;
          case 103: 
            { return symbol(sym.INTO,"INTO");
            } 
            // fall through
          case 457: break;
          case 104: 
            { return symbol(sym.NONE,"NONE");
            } 
            // fall through
          case 458: break;
          case 105: 
            { return symbol(sym.NULL,"NULL");
            } 
            // fall through
          case 459: break;
          case 106: 
            { return symbol(sym.NEXT,"NEXT");
            } 
            // fall through
          case 460: break;
          case 107: 
            { return symbol(sym.DATE,"DATE");
            } 
            // fall through
          case 461: break;
          case 108: 
            { return symbol(sym.DBCC,"DBCC");
            } 
            // fall through
          case 462: break;
          case 109: 
            { return symbol(sym.DUMP,"DUMP");
            } 
            // fall through
          case 463: break;
          case 110: 
            { return symbol(sym.DESC,"DESC");
            } 
            // fall through
          case 464: break;
          case 111: 
            { return symbol(sym.DENY,"DENY");
            } 
            // fall through
          case 465: break;
          case 112: 
            { return symbol(sym.DISK,"DISK");
            } 
            // fall through
          case 466: break;
          case 113: 
            { return symbol(sym.DROP,"DROP");
            } 
            // fall through
          case 467: break;
          case 114: 
            { return symbol(sym.ROWS,"ROWS");
            } 
            // fall through
          case 468: break;
          case 115: 
            { return symbol(sym.RULE,"RULE");
            } 
            // fall through
          case 469: break;
          case 116: 
            { return symbol(sym.REAL,"REAL");
            } 
            // fall through
          case 470: break;
          case 117: 
            { return symbol(sym.READ,"READ");
            } 
            // fall through
          case 471: break;
          case 118: 
            { return symbol(sym.YEAR,"YEAR");
            } 
            // fall through
          case 472: break;
          case 119: 
            { return symbol(sym.HOUR,"HOUR");
            } 
            // fall through
          case 473: break;
          case 120: 
            { return symbol(sym.ZONE,"ZONE");
            } 
            // fall through
          case 474: break;
          case 121: 
            { return symbol(sym.VIEW,"VIEW");
            } 
            // fall through
          case 475: break;
          case 122: 
            { return symbol(sym.GOTO,"GOTO");
            } 
            // fall through
          case 476: break;
          case 123: 
            { return symbol(sym.KILL,"KILL");
            } 
            // fall through
          case 477: break;
          case 124: 
            { return symbol(sym.PLAN,"PLAN");
            } 
            // fall through
          case 478: break;
          case 125: 
            { return symbol(sym.PROC,"PROC");
            } 
            // fall through
          case 479: break;
          case 126: 
            { return symbol(sym.WORK,"WORK");
            } 
            // fall through
          case 480: break;
          case 127: 
            { return symbol(sym.WITH,"WITH");
            } 
            // fall through
          case 481: break;
          case 128: 
            { return symbol(sym.WHEN,"WHEN");
            } 
            // fall through
          case 482: break;
          case 129: 
            { return symbol(sym.FULL,"FULL");
            } 
            // fall through
          case 483: break;
          case 130: 
            { return symbol(sym.FILE,"FILE");
            } 
            // fall through
          case 484: break;
          case 131: 
            { return symbol(sym.FROM,"FROM");
            } 
            // fall through
          case 485: break;
          case 132: 
            { return symbol(sym.JOIN,"JOIN");
            } 
            // fall through
          case 486: break;
          case 133: 
            { ////TOKENS.add(new MyTOKEN(yytext(), "Comentario.Multilinea", yycolumn, yyline));
    //return symbol(sym.ComentarioMultiliena,"ComentarioMultiliena");
	//System.out.println(yytext());
            } 
            // fall through
          case 487: break;
          case 134: 
            { return symbol(sym.ALTER,"ALTER");
            } 
            // fall through
          case 488: break;
          case 135: 
            { return symbol(sym.BEGIN,"BEGIN");
            } 
            // fall through
          case 489: break;
          case 136: 
            { return symbol(sym.BREAK,"BREAK");
            } 
            // fall through
          case 490: break;
          case 137: 
            { return symbol(sym.SPACE,"SPACE");
            } 
            // fall through
          case 491: break;
          case 138: 
            { return symbol(sym.SQLCA,"SQLCA");
            } 
            // fall through
          case 492: break;
          case 139: 
            { return symbol(sym.OUTER,"OUTER");
            } 
            // fall through
          case 493: break;
          case 140: 
            { return symbol(sym.ORDER,"ORDER");
            } 
            // fall through
          case 494: break;
          case 141: 
            { return symbol(sym.LOCAL,"LOCAL");
            } 
            // fall through
          case 495: break;
          case 142: 
            { return symbol(sym.LOWER,"LOWER");
            } 
            // fall through
          case 496: break;
          case 143: 
            { return symbol(sym.LEVEL,"LEVEL");
            } 
            // fall through
          case 497: break;
          case 144: 
            { return symbol(sym.USAGE,"USAGE");
            } 
            // fall through
          case 498: break;
          case 145: 
            { return symbol(sym.USING,"USING");
            } 
            // fall through
          case 499: break;
          case 146: 
            { return symbol(sym.UNION,"UNION");
            } 
            // fall through
          case 500: break;
          case 147: 
            { return symbol(sym.UPPER,"UPPER");
            } 
            // fall through
          case 501: break;
          case 148: 
            { return symbol(sym.TABLE,"TABLE");
            } 
            // fall through
          case 502: break;
          case 149: 
            { return symbol(sym.COUNT,"COUNT");
            } 
            // fall through
          case 503: break;
          case 150: 
            { return symbol(sym.CLOSE,"CLOSE");
            } 
            // fall through
          case 504: break;
          case 151: 
            { return symbol(sym.CROSS,"CROSS");
            } 
            // fall through
          case 505: break;
          case 152: 
            { return symbol(sym.CHECK,"CHECK");
            } 
            // fall through
          case 506: break;
          case 153: 
            { return symbol(sym.INNER,"INNER");
            } 
            // fall through
          case 507: break;
          case 154: 
            { return symbol(sym.INDEX,"INDEX");
            } 
            // fall through
          case 508: break;
          case 155: 
            { return symbol(sym.INPUT,"INPUT");
            } 
            // fall through
          case 509: break;
          case 156: 
            { return symbol(sym.NAMES,"NAMES");
            } 
            // fall through
          case 510: break;
          case 157: 
            { return symbol(sym.NCHAR,"NCHAR");
            } 
            // fall through
          case 511: break;
          case 158: 
            { return symbol(sym.RIGHT,"RIGHT");
            } 
            // fall through
          case 512: break;
          case 159: 
            { return symbol(sym.VALUE,"VALUE");
            } 
            // fall through
          case 513: break;
          case 160: 
            { return symbol(sym.GRANT,"GRANT");
            } 
            // fall through
          case 514: break;
          case 161: 
            { return symbol(sym.GROUP,"GROUP");
            } 
            // fall through
          case 515: break;
          case 162: 
            { return symbol(sym.PIVOT,"PIVOT");
            } 
            // fall through
          case 516: break;
          case 163: 
            { return symbol(sym.PRIOR,"PRIOR");
            } 
            // fall through
          case 517: break;
          case 164: 
            { return symbol(sym.PRINT,"PRINT");
            } 
            // fall through
          case 518: break;
          case 165: 
            { return symbol(sym.WRITE,"WRITE");
            } 
            // fall through
          case 519: break;
          case 166: 
            { return symbol(sym.WHERE,"WHERE");
            } 
            // fall through
          case 520: break;
          case 167: 
            { return symbol(sym.WHILE,"WHILE");
            } 
            // fall through
          case 521: break;
          case 168: 
            { return symbol(sym.MATCH,"MATCH");
            } 
            // fall through
          case 522: break;
          case 169: 
            { return symbol(sym.MONTH,"MONTH");
            } 
            // fall through
          case 523: break;
          case 170: 
            { return symbol(sym.MERGE,"MERGE");
            } 
            // fall through
          case 524: break;
          case 171: 
            { return symbol(sym.FALSE,"FALSE");
            } 
            // fall through
          case 525: break;
          case 172: 
            { return symbol(sym.FOUND,"FOUND");
            } 
            // fall through
          case 526: break;
          case 173: 
            { return symbol(sym.FLOAT,"FLOAT");
            } 
            // fall through
          case 527: break;
          case 174: 
            { return symbol(sym.FETCH,"FETCH");
            } 
            // fall through
          case 528: break;
          case 175: 
            { return symbol(sym.FIRST,"FIRST");
            } 
            // fall through
          case 529: break;
          case 176: 
            { return symbol(sym.ACTION,"ACTION");
            } 
            // fall through
          case 530: break;
          case 177: 
            { return symbol(sym.BACKUP,"BACKUP");
            } 
            // fall through
          case 531: break;
          case 178: 
            { return symbol(sym.BROWSE,"BROWSE");
            } 
            // fall through
          case 532: break;
          case 179: 
            { return symbol(sym.SELECT,"SELECT");
            } 
            // fall through
          case 533: break;
          case 180: 
            { return symbol(sym.SECOND,"SECOND");
            } 
            // fall through
          case 534: break;
          case 181: 
            { return symbol(sym.SCROLL,"SCROLL");
            } 
            // fall through
          case 535: break;
          case 182: 
            { return symbol(sym.SCHEMA,"SCHEMA");
            } 
            // fall through
          case 536: break;
          case 183: 
            { return symbol(sym.OUTPUT,"OUTPUT");
            } 
            // fall through
          case 537: break;
          case 184: 
            { return symbol(sym.OPTION,"OPTION");
            } 
            // fall through
          case 538: break;
          case 185: 
            { return symbol(sym.OFFSES,"OFFSES");
            } 
            // fall through
          case 539: break;
          case 186: 
            { return symbol(sym.LINENO,"LINENO");
            } 
            // fall through
          case 540: break;
          case 187: 
            { return symbol(sym.UNIQUE,"UNIQUE");
            } 
            // fall through
          case 541: break;
          case 188: 
            { return symbol(sym.UPDATE,"UPDATE");
            } 
            // fall through
          case 542: break;
          case 189: 
            { return symbol(sym.ESCAPE,"ESCAPE");
            } 
            // fall through
          case 543: break;
          case 190: 
            { return symbol(sym.ERRLVL,"ERRLVL");
            } 
            // fall through
          case 544: break;
          case 191: 
            { return symbol(sym.EXCEPT,"EXCEPT");
            } 
            // fall through
          case 545: break;
          case 192: 
            { return symbol(sym.EXISTS,"EXISTS");
            } 
            // fall through
          case 546: break;
          case 193: 
            { return symbol(sym.COLUMN,"COLUMN");
            } 
            // fall through
          case 547: break;
          case 194: 
            { return symbol(sym.COMMIT,"COMMIT");
            } 
            // fall through
          case 548: break;
          case 195: 
            { return symbol(sym.CURSOR,"CURSOR");
            } 
            // fall through
          case 549: break;
          case 196: 
            { return symbol(sym.CREATE,"CREATE");
            } 
            // fall through
          case 550: break;
          case 197: 
            { return symbol(sym.INSERT,"INSERT");
            } 
            // fall through
          case 551: break;
          case 198: 
            { return symbol(sym.NULLIF,"NULLIF");
            } 
            // fall through
          case 552: break;
          case 199: 
            { return symbol(sym.DOUBLE,"DOUBLE");
            } 
            // fall through
          case 553: break;
          case 200: 
            { return symbol(sym.DOMAIN,"DOMAIN");
            } 
            // fall through
          case 554: break;
          case 201: 
            { return symbol(sym.DELETE,"DELETE");
            } 
            // fall through
          case 555: break;
          case 202: 
            { return symbol(sym.RETURN,"RETURN");
            } 
            // fall through
          case 556: break;
          case 203: 
            { return symbol(sym.REVOKE,"REVOKE");
            } 
            // fall through
          case 557: break;
          case 204: 
            { return symbol(sym.REVERT,"REVERT");
            } 
            // fall through
          case 558: break;
          case 205: 
            { return symbol(sym.HAVING,"HAVING");
            } 
            // fall through
          case 559: break;
          case 206: 
            { return symbol(sym.VALUES,"VALUES");
            } 
            // fall through
          case 560: break;
          case 207: 
            { return symbol(sym.GLOBAL,"GLOBAL");
            } 
            // fall through
          case 561: break;
          case 208: 
            { return symbol(sym.PASCAL,"PASCAL");
            } 
            // fall through
          case 562: break;
          case 209: 
            { return symbol(sym.PUBLIC,"PUBLIC");
            } 
            // fall through
          case 563: break;
          case 210: 
            { return symbol(sym.MODULE,"MODULE");
            } 
            // fall through
          case 564: break;
          case 211: 
            { return symbol(sym.MINUTE,"MINUTE");
            } 
            // fall through
          case 565: break;
          case 212: 
            { return symbol(sym.BETWEEN,"BETWEEN");
            } 
            // fall through
          case 566: break;
          case 213: 
            { return symbol(sym.SESSION,"SESSION");
            } 
            // fall through
          case 567: break;
          case 214: 
            { return symbol(sym.SETUSER,"SETUSER");
            } 
            // fall through
          case 568: break;
          case 215: 
            { return symbol(sym.SECTION,"SECTION");
            } 
            // fall through
          case 569: break;
          case 216: 
            { return symbol(sym.SQLCODE,"SQLCODE");
            } 
            // fall through
          case 570: break;
          case 217: 
            { return symbol(sym.OPENXML,"OPENXML");
            } 
            // fall through
          case 571: break;
          case 218: 
            { return symbol(sym.LEADING,"LEADING");
            } 
            // fall through
          case 572: break;
          case 219: 
            { return symbol(sym.UNKNOWN,"UNKNOWN");
            } 
            // fall through
          case 573: break;
          case 220: 
            { return symbol(sym.UNPIVOT,"UNPIVOT");
            } 
            // fall through
          case 574: break;
          case 221: 
            { return symbol(sym.TSEQUAL,"TSEQUAL");
            } 
            // fall through
          case 575: break;
          case 222: 
            { return symbol(sym.TRIGGER,"TRIGGER");
            } 
            // fall through
          case 576: break;
          case 223: 
            { return symbol(sym.EXTRACT,"EXTRACT");
            } 
            // fall through
          case 577: break;
          case 224: 
            { return symbol(sym.EXECUTE,"EXECUTE");
            } 
            // fall through
          case 578: break;
          case 225: 
            { return symbol(sym.CASCADE,"CASCADE");
            } 
            // fall through
          case 579: break;
          case 226: 
            { return symbol(sym.CATALOG,"CATALOG");
            } 
            // fall through
          case 580: break;
          case 227: 
            { return symbol(sym.COLLATE,"COLLATE");
            } 
            // fall through
          case 581: break;
          case 228: 
            { return symbol(sym.CONNECT,"CONNECT");
            } 
            // fall through
          case 582: break;
          case 229: 
            { return symbol(sym.CONVERT,"CONVERT");
            } 
            // fall through
          case 583: break;
          case 230: 
            { return symbol(sym.COMPUTE,"COMPUTE");
            } 
            // fall through
          case 584: break;
          case 231: 
            { return symbol(sym.CURRENT,"CURRENT");
            } 
            // fall through
          case 585: break;
          case 232: 
            { return symbol(sym.INTEGER,"INTEGER");
            } 
            // fall through
          case 586: break;
          case 233: 
            { return symbol(sym.INCLUDE,"INCLUDE");
            } 
            // fall through
          case 587: break;
          case 234: 
            { return symbol(sym.NATURAL,"NATURAL");
            } 
            // fall through
          case 588: break;
          case 235: 
            { return symbol(sym.NOCHECK,"NOCHECK");
            } 
            // fall through
          case 589: break;
          case 236: 
            { return symbol(sym.NUMERIC,"NUMERIC");
            } 
            // fall through
          case 590: break;
          case 237: 
            { return symbol(sym.DECLARE,"DECLARE");
            } 
            // fall through
          case 591: break;
          case 238: 
            { return symbol(sym.DECIMAL,"DECIMAL");
            } 
            // fall through
          case 592: break;
          case 239: 
            { return symbol(sym.DEFAULT,"DEFAULT");
            } 
            // fall through
          case 593: break;
          case 240: 
            { return symbol(sym.RESTORE,"RESTORE");
            } 
            // fall through
          case 594: break;
          case 241: 
            { return symbol(sym.RETURNS,"RETURNS");
            } 
            // fall through
          case 595: break;
          case 242: 
            { return symbol(sym.VARCHAR,"VARCHAR");
            } 
            // fall through
          case 596: break;
          case 243: 
            { return symbol(sym.VARYING,"VARYING");
            } 
            // fall through
          case 597: break;
          case 244: 
            { return symbol(sym.PARTIAL,"PARTIAL");
            } 
            // fall through
          case 598: break;
          case 245: 
            { return symbol(sym.PERCENT,"PERCENT");
            } 
            // fall through
          case 599: break;
          case 246: 
            { return symbol(sym.PREPARE,"PREPARE");
            } 
            // fall through
          case 600: break;
          case 247: 
            { return symbol(sym.PRIMARY,"PRIMARY");
            } 
            // fall through
          case 601: break;
          case 248: 
            { return symbol(sym.WAITFOR,"WAITFOR");
            } 
            // fall through
          case 602: break;
          case 249: 
            { return symbol(sym.FORTRAN,"FORTRAN");
            } 
            // fall through
          case 603: break;
          case 250: 
            { return symbol(sym.FOREIGN,"FOREIGN");
            } 
            // fall through
          case 604: break;
          case 251: 
            { return symbol(sym.ABSOLUTE,"ABSOLUTE");
            } 
            // fall through
          case 605: break;
          case 252: 
            { return symbol(sym.ALLOCATE,"ALLOCATE");
            } 
            // fall through
          case 606: break;
          case 253: 
            { return symbol(sym.SHUTDOWN,"SHUTDOWN");
            } 
            // fall through
          case 607: break;
          case 254: 
            { return symbol(sym.SMALLINT,"SMALLINT");
            } 
            // fall through
          case 608: break;
          case 255: 
            { return symbol(sym.SQLSTATE,"SQLSTATE");
            } 
            // fall through
          case 609: break;
          case 256: 
            { return symbol(sym.SQLERROR,"SQLERROR");
            } 
            // fall through
          case 610: break;
          case 257: 
            { return symbol(sym.OVERLAPS,"OVERLAPS");
            } 
            // fall through
          case 611: break;
          case 258: 
            { return symbol(sym.LANGUAGE,"LANGUAGE");
            } 
            // fall through
          case 612: break;
          case 259: 
            { return symbol(sym.TEXTSIZE,"TEXTSIZE");
            } 
            // fall through
          case 613: break;
          case 260: 
            { return symbol(sym.TRAILING,"TRAILING");
            } 
            // fall through
          case 614: break;
          case 261: 
            { return symbol(sym.TRUNCATE,"TRUNCATE");
            } 
            // fall through
          case 615: break;
          case 262: 
            { return symbol(sym.END_EXEC,"END_EXEC");
            } 
            // fall through
          case 616: break;
          case 263: 
            { return symbol(sym.EXTERNAL,"EXTERNAL");
            } 
            // fall through
          case 617: break;
          case 264: 
            { return symbol(sym.CASCADED,"CASCADED");
            } 
            // fall through
          case 618: break;
          case 265: 
            { return symbol(sym.COALESCE,"COALESCE");
            } 
            // fall through
          case 619: break;
          case 266: 
            { return symbol(sym.CONTAINS,"CONTAINS");
            } 
            // fall through
          case 620: break;
          case 267: 
            { return symbol(sym.CONTINUE,"CONTINUE");
            } 
            // fall through
          case 621: break;
          case 268: 
            { return symbol(sym.INTERVAL,"INTERVAL");
            } 
            // fall through
          case 622: break;
          case 269: 
            { return symbol(sym.IDENTITY,"IDENTITY");
            } 
            // fall through
          case 623: break;
          case 270: 
            { return symbol(sym.NATIONAL,"NATIONAL");
            } 
            // fall through
          case 624: break;
          case 271: 
            { return symbol(sym.DATABASE,"DATABASE");
            } 
            // fall through
          case 625: break;
          case 272: 
            { return symbol(sym.DESCRIBE,"DESCRIBE");
            } 
            // fall through
          case 626: break;
          case 273: 
            { return symbol(sym.DEFERRED,"DEFERRED");
            } 
            // fall through
          case 627: break;
          case 274: 
            { return symbol(sym.DISTINCT,"DISTINCT");
            } 
            // fall through
          case 628: break;
          case 275: 
            { return symbol(sym.ROLLBACK,"ROLLBACK");
            } 
            // fall through
          case 629: break;
          case 276: 
            { return symbol(sym.ROWCOUNT,"ROWCOUNT");
            } 
            // fall through
          case 630: break;
          case 277: 
            { return symbol(sym.READTEXT,"READTEXT");
            } 
            // fall through
          case 631: break;
          case 278: 
            { return symbol(sym.RESTRICT,"RESTRICT");
            } 
            // fall through
          case 632: break;
          case 279: 
            { return symbol(sym.RELATIVE,"RELATIVE");
            } 
            // fall through
          case 633: break;
          case 280: 
            { return symbol(sym.HOLDLOCK,"HOLDLOCK");
            } 
            // fall through
          case 634: break;
          case 281: 
            { return symbol(sym.POSITION,"POSITION");
            } 
            // fall through
          case 635: break;
          case 282: 
            { return symbol(sym.PRESERVE,"PRESERVE");
            } 
            // fall through
          case 636: break;
          case 283: 
            { return symbol(sym.WHENEVER,"WHENEVER");
            } 
            // fall through
          case 637: break;
          case 284: 
            { return symbol(sym.FUNCTION,"FUNCTION");
            } 
            // fall through
          case 638: break;
          case 285: 
            { return symbol(sym.FREETEXT,"FREETEXT");
            } 
            // fall through
          case 639: break;
          case 286: 
            { return symbol(sym.ASSERTION,"ASSERTION");
            } 
            // fall through
          case 640: break;
          case 287: 
            { return symbol(sym.SUBSTRING,"SUBSTRING");
            } 
            // fall through
          case 641: break;
          case 288: 
            { return symbol(sym.OPENQUERY,"OPENQUERY");
            } 
            // fall through
          case 642: break;
          case 289: 
            { return symbol(sym.TEMPORARY,"TEMPORARY");
            } 
            // fall through
          case 643: break;
          case 290: 
            { return symbol(sym.TIMESTAMP,"TIMESTAMP");
            } 
            // fall through
          case 644: break;
          case 291: 
            { return symbol(sym.TRANSLATE,"TRANSLATE");
            } 
            // fall through
          case 645: break;
          case 292: 
            { return symbol(sym.EXCEPTION,"EXCEPTION");
            } 
            // fall through
          case 646: break;
          case 293: 
            { return symbol(sym.CLUSTERED,"CLUSTERED");
            } 
            // fall through
          case 647: break;
          case 294: 
            { return symbol(sym.CHARACTER,"CHARACTER");
            } 
            // fall through
          case 648: break;
          case 295: 
            { return symbol(sym.ISOLATION,"ISOLATION");
            } 
            // fall through
          case 649: break;
          case 296: 
            { return symbol(sym.INTERSECT,"INTERSECT");
            } 
            // fall through
          case 650: break;
          case 297: 
            { return symbol(sym.INITIALLY,"INITIALLY");
            } 
            // fall through
          case 651: break;
          case 298: 
            { return symbol(sym.INDICATOR,"INDICATOR");
            } 
            // fall through
          case 652: break;
          case 299: 
            { return symbol(sym.IMMEDIATE,"IMMEDIATE");
            } 
            // fall through
          case 653: break;
          case 300: 
            { return symbol(sym.DISTURBED,"DISTURBED");
            } 
            // fall through
          case 654: break;
          case 301: 
            { return symbol(sym.RAISERROR,"RAISERROR");
            } 
            // fall through
          case 655: break;
          case 302: 
            { return symbol(sym.PROCEDURE,"PROCEDURE");
            } 
            // fall through
          case 656: break;
          case 303: 
            { return symbol(sym.PRECISION,"PRECISION");
            } 
            // fall through
          case 657: break;
          case 304: 
            { return symbol(sym.WRITETEXT,"WRITETEXT");
            } 
            // fall through
          case 658: break;
          case 305: 
            { return symbol(sym.BIT_LENGTH,"BIT_LENGTH");
            } 
            // fall through
          case 659: break;
          case 306: 
            { return symbol(sym.STATISTICS,"STATISTICS");
            } 
            // fall through
          case 660: break;
          case 307: 
            { return symbol(sym.SQLWARNING,"SQLWARNING");
            } 
            // fall through
          case 661: break;
          case 308: 
            { return symbol(sym.OPENROWSET,"OPENROWSET");
            } 
            // fall through
          case 662: break;
          case 309: 
            { return symbol(sym.UPDATETEXT,"UPDATETEXT");
            } 
            // fall through
          case 663: break;
          case 310: 
            { return symbol(sym.COALLITION,"COALLITION");
            } 
            // fall through
          case 664: break;
          case 311: 
            { return symbol(sym.CONSTRAINT,"CONSTRAINT");
            } 
            // fall through
          case 665: break;
          case 312: 
            { return symbol(sym.CONNECTION,"CONNECTION");
            } 
            // fall through
          case 666: break;
          case 313: 
            { return symbol(sym.CHECKPOINT,"CHECKPOINT");
            } 
            // fall through
          case 667: break;
          case 314: 
            { return symbol(sym.DEALLOCATE,"DEALLOCATE");
            } 
            // fall through
          case 668: break;
          case 315: 
            { return symbol(sym.DESCRIPTOR,"DESCRIPTOR");
            } 
            // fall through
          case 669: break;
          case 316: 
            { return symbol(sym.DEFERRABLE,"DEFERRABLE");
            } 
            // fall through
          case 670: break;
          case 317: 
            { return symbol(sym.DISCONNECT,"DISCONNECT");
            } 
            // fall through
          case 671: break;
          case 318: 
            { return symbol(sym.ROWGUIDCOL,"ROWGUIDCOL");
            } 
            // fall through
          case 672: break;
          case 319: 
            { return symbol(sym.REFERENCES,"REFERENCES");
            } 
            // fall through
          case 673: break;
          case 320: 
            { return symbol(sym.PRIVILEGES,"PRIVILEGES");
            } 
            // fall through
          case 674: break;
          case 321: 
            { return symbol(sym.FILLFACTOR,"FILLFACTOR");
            } 
            // fall through
          case 675: break;
          case 322: 
            { return symbol(sym.SYSTEM_USER,"SYSTEM_USER");
            } 
            // fall through
          case 676: break;
          case 323: 
            { return symbol(sym.TABLESAMPLE,"TABLESAMPLE");
            } 
            // fall through
          case 677: break;
          case 324: 
            { return symbol(sym.TRANSACTION,"TRANSACTION");
            } 
            // fall through
          case 678: break;
          case 325: 
            { return symbol(sym.TRANSLATION,"TRANSLATION");
            } 
            // fall through
          case 679: break;
          case 326: 
            { return symbol(sym.TRY_CONVERT,"TRY_CONVERT");
            } 
            // fall through
          case 680: break;
          case 327: 
            { return symbol(sym.CONSTRAINTS,"CONSTRAINTS");
            } 
            // fall through
          case 681: break;
          case 328: 
            { return symbol(sym.CHAR_LENGTH,"CHAR_LENGTH");
            } 
            // fall through
          case 682: break;
          case 329: 
            { return symbol(sym.INSENSITIVE,"INSENSITIVE");
            } 
            // fall through
          case 683: break;
          case 330: 
            { return symbol(sym.IDENTITYCOL,"IDENTITYCOL");
            } 
            // fall through
          case 684: break;
          case 331: 
            { return symbol(sym.DIAGNOSTICS,"DIAGNOSTICS");
            } 
            // fall through
          case 685: break;
          case 332: 
            { return symbol(sym.RECONFIGURE,"RECONFIGURE");
            } 
            // fall through
          case 686: break;
          case 333: 
            { return symbol(sym.REPLICATION,"REPLICATION");
            } 
            // fall through
          case 687: break;
          case 334: 
            { return symbol(sym.WITHINGROUP,"WITHINGROUP");
            } 
            // fall through
          case 688: break;
          case 335: 
            { return symbol(sym.SESSION_USER,"SESSION_USER");
            } 
            // fall through
          case 689: break;
          case 336: 
            { return symbol(sym.OCTET_LENGTH,"OCTET_LENGTH");
            } 
            // fall through
          case 690: break;
          case 337: 
            { return symbol(sym.CURRENT_USER,"CURRENT_USER");
            } 
            // fall through
          case 691: break;
          case 338: 
            { return symbol(sym.CURRENT_TIME,"CURRENT_TIME");
            } 
            // fall through
          case 692: break;
          case 339: 
            { return symbol(sym.CURRENT_DATE,"CURRENT_DATE");
            } 
            // fall through
          case 693: break;
          case 340: 
            { return symbol(sym.NONCLUSTERED,"NONCLUSTERED");
            } 
            // fall through
          case 694: break;
          case 341: 
            { return symbol(sym.AUTHORIZATION,"AUTHORIZATION");
            } 
            // fall through
          case 695: break;
          case 342: 
            { return symbol(sym.SECURITYAUDIT,"SECURITYAUDIT");
            } 
            // fall through
          case 696: break;
          case 343: 
            { return symbol(sym.TIMEZONE_HOUR,"TIMEZONE_HOUR");
            } 
            // fall through
          case 697: break;
          case 344: 
            { return symbol(sym.CONTAINSTABLE,"CONTAINSTABLE");
            } 
            // fall through
          case 698: break;
          case 345: 
            { return symbol(sym.CORRESPONDING,"CORRESPONDING");
            } 
            // fall through
          case 699: break;
          case 346: 
            { return symbol(sym.FREETEXTTABLE,"FREETEXTTABLE");
            } 
            // fall through
          case 700: break;
          case 347: 
            { return symbol(sym.OPENDATASOURCE,"OPENDATASOURCE");
            } 
            // fall through
          case 701: break;
          case 348: 
            { return symbol(sym.TIMEZONE_MINUTE,"TIMEZONE_MINUTE");
            } 
            // fall through
          case 702: break;
          case 349: 
            { return symbol(sym.IDENTITY_INSERT,"IDENTITY_INSERT");
            } 
            // fall through
          case 703: break;
          case 350: 
            { return symbol(sym.CURRENT_TIMESTAMP,"CURRENT_TIMESTAMP");
            } 
            // fall through
          case 704: break;
          case 351: 
            { return symbol(sym.CHARACHTER_LENGTH,"CHARACHTER_LENGTH");
            } 
            // fall through
          case 705: break;
          case 352: 
            { return symbol(sym.SEMANTICKEYPHRASETABLE,"SEMANTICKEYPHRASETABLE");
            } 
            // fall through
          case 706: break;
          case 353: 
            { return symbol(sym.SEMANTICSIMILARITYTABLE,"SEMANTICSIMILARITYTABLE");
            } 
            // fall through
          case 707: break;
          case 354: 
            { return symbol(sym.SEMANTICSIMILARITYDETAILSTABLE,"SEMANTICSIMILARITYDETAILSTABLE");
            } 
            // fall through
          case 708: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
